

Start of the project documentation
==================================

Modules Documentation

	Module : m_CodeManager
			==============================================================================
			Module : CodeManager
			
			Description:
			This module provides functionality to export and import VBA code modules,
			classes, and forms from an Access database project. It allows for easy
			version control and code management by saving and loading code files to and
			from the file system.
			
			Key Responsibilities:
			- Exporting VBA modules, class modules, and forms to the file system.
			- Importing VBA modules, class modules, and forms back into the project.
			
			Usage:
			1. Call `ExportCode` to save all modules, class modules, and forms to the
			   specified directory.
			2. Call `ImportCode` to load the modules, class modules, and forms from the
			   specified directory back into the project.
			
			Dependencies:
			- Requires that `dbCodePath` is set to the path where the code files will be
			  saved or loaded from.
			- Utilizes the `VBE` object model, so the appropriate references need to be set
			  in the VBA editor.
			
			==============================================================================

		Public Sub ExportCode()
			Exports all modules, class modules, and forms in the project to the file system.
			
			The code modules are saved with their respective extensions (.bas for modules,
			.cls for classes, .frm for forms) in the directory specified by `dbCodePath`.
			
			Usage:
			- Ensure `dbCodePath` is set to the desired export directory.
			- Call this subroutine to export the code.

		Public Sub ImportCode()
			Imports all modules, class modules, and forms from the file system into the project.
			
			The code modules are loaded from files with their respective extensions (.bas
			for modules, .cls for classes, .frm for forms) located in the directory
			specified by `dbCodePath`.
			
			Usage:
			- Ensure `dbCodePath` is set to the desired import directory.
			- Call this subroutine to import the code.
			- Note: Forms cannot be imported correctly and will require manual updates.

	Module : m_Command_Processing
			==============================================================================
			Module : m_Command_Processing
			
			Description:
			This module handles various command operations within the application. It
			contains subroutines that perform tasks such as user administration, generating
			documentation, loading resources, and exporting data. These commands are typically
			triggered by UI elements like buttons or menus and provide a bridge between the
			user interface and the underlying application logic.
			
			Key Responsibilities:
			- Manage user interactions and trigger corresponding application functions.
			- Handle data loading, exporting, and resource management tasks.
			- Provide utility functions for database and Excel operations.
			
			Usage:
			1. Include this module in your VBA project.
			2. Bind these subroutines to UI elements to trigger specific application actions.
			3. Customize the subroutines as needed to fit your application's requirements.
			
			Dependencies:
			- Requires the `Init_Context` function to initialize the application context.
			- Relies on other modules and classes for database management, logging, and Excel operations.
			
			==============================================================================

		Sub UserAdmin()
			Opens the User Administration form in datasheet view.

		Sub HelpAbout()
			Displays the "About" dialog with information about the application version and author.

		Private Sub AppExit_Click()
			Prompts the user to back up the database before exiting the application.

		Sub GenerateDocumentation()
			Generates documentation for the current project using the cAutoDocReporter class.

		Sub LoadResourceStrings()
			Loads resource strings from an Excel file into the database.

		Sub Reload_Settings()
			Reloads settings from an Excel file into the database after deleting existing settings.

		Sub Reload_Views()
			Reloads view definitions to apply changes made to them.

		Sub Reload_Menus()
			Reloads menu definitions and resource strings from an Excel file into the database.

		Sub loadData_2002_2006(file As cDB_SOKFile)
			Loads data from an SOK file for the years 2002-2006.

		Sub loadData_2007_2014(file As cDB_SOKFile)
			Loads data from an SOK file for the years 2007-2014.

		Sub loadData_2015_2019(file As cDB_SOKFile)
			Loads data from an SOK file for the years 2015-2019.

		Sub loadData_2020_20nn(file As cDB_SOKFile)
			Loads data from an SOK file for the years 2020 and beyond.

		Sub dbLoadFiles()
			Loads SOK files into the database, checking for modifications and updates as needed.

		Sub dbLoadGGR()
			Loads Gross Gaming Revenue (GGR) data into the database.

		Sub dbLoadDZS()
			Loads DZS activity data into the database.

		Sub dbLoadFilesList()
			Loads the list of SOK files into the database, initializing from the file system.

		Sub ChangePassword()
			Opens the Change Password form for the current user.

		Function InitializeNewDB()
			Initializes a new database by loading common data and setting up resources.

		Sub LoadCommonDB(db As cDB)
			Loads common data into the database during initialization.

		Sub UpdateCommonDB()
			Updates common data in the database with new data from the source file.

		Sub ExportQueries()
			Exports the current database queries to a file.

		Sub dbLoadCrossViewsInfos(ByVal Language As String)
			Loads cross-view information into the database based on the selected language.

		Function Get_ExportWorkBook(Operation As String, Language As String) As Excel.Workbook
			Creates a new Excel workbook for exporting cross-view data and initializes it.

		Sub Export_CrossViews_To_Excel(Operation As String, ByVal Language As String)
			Exports cross-view data to an Excel file based on the operation and language.

		Private Sub Application_Quit()
			Closes all Excel workbooks and quits the Excel application when quitting.

	Module : m_CommandHandlers
			==============================================================================
			Module : CommandHandlers
			
			Description:
			This module defines various subroutines that handle command operations for
			the application. Each subroutine is responsible for initializing the application
			context and then calling specific functions or procedures that perform tasks
			such as exporting data, loading files, generating documentation, and more.
			These subroutines are typically bound to UI elements like buttons in forms
			or menu items, allowing users to execute these commands with a single action.
			
			Key Responsibilities:
			- Initialize the application context before executing commands.
			- Handle user interactions and execute corresponding application functions.
			- Provide clear and consistent command execution flow.
			
			Usage:
			1. Include this module in your VBA project.
			2. Bind these command subroutines to the appropriate UI elements (e.g., buttons).
			3. Customize the subroutines as needed to suit the specific needs of your application.
			
			Dependencies:
			- Requires the `Init_Context` function to properly initialize the application context.
			- Relies on other modules and classes for specific operations like exporting data,
			  generating documentation, and managing database content.
			
			==============================================================================

		Sub UserAdmin_Cmd()
			Initializes the context and opens the User Administration interface.

		Sub InitializeNewDB_Cmd()
			Initializes the context, closes any open objects, and initializes a new database.

		Sub HelpAbout_Cmd()
			Initializes the context and opens the Help/About dialog.

		Sub ChangePassword_Cmd()
			Initializes the context and opens the Change Password interface.

		Sub ExportSheetsToCSV_cmd()
			Initializes the context and exports Excel sheets to CSV format.

		Sub ReloadCSVToExistingWorkbook_cmd()
			Initializes the context and reloads CSV data into an existing workbook.

		Sub ExportCode_Cmd()
			Initializes the context and exports VBA code modules to files.

		Sub ImportCode_Cmd()
			Initializes the context, warns the user about overwriting code, and imports VBA code modules.

		Sub Close_Tabs_Cmd()
			Initializes the context and closes all open objects except the main form and cleanup form.

		Sub DoTestSuite_Cmd()
			Initializes the context, closes all open objects, and runs the test suite.

		Sub Load_File_List_Cmd()
			Initializes the context and loads a list of files into the database.

		Sub Load_Files_Cmd()
			Initializes the context and loads files into the database.

		Sub GenerateDocumentation_Cmd()
			Initializes the context and generates project documentation.

		Sub ExportQueries_Cmd()
			Initializes the context and exports queries.

		Sub Generate_DB_Classes_Cmd()
			Initializes the context and generates database record and class modules.

		Sub Generate_Classes_Cmd()
			Initializes the context and generates class modules.

		Sub Load_GGR_Cmd()
			Initializes the context and loads GGR (Gross Gaming Revenue) data.

		Sub Load_DZS_Cmd()
			Initializes the context and loads DZS data.

		Sub Load_DB_Cmd()
			Initializes the context, logs the start of the database load process,
			closes open objects, initializes the new database, and loads various datasets.

		Sub Export_LB_Cmd()
			Initializes the context, loads cross-view information based on the selected language,
			and exports the "LB" cross-view data to Excel.

		Sub Export_OL_Cmd()
			Initializes the context, loads cross-view information based on the selected language,
			and exports the "OL" cross-view data to Excel.

		Sub Export_BO_Cmd()
			Initializes the context, loads cross-view information based on the selected language,
			and exports the "BO" cross-view data to Excel.

		Sub Export_All_Cmd()
			Exports all cross-view data ("OL", "LB", "BO") to Excel.

		Sub Load_Query_Cmd()
			Initializes the context and reloads database views.

	Module : m_Context
			==============================================================================
			Module : Context
			
			Description:
			This module defines global constants, variables, and functions that manage
			application-wide settings, paths, logging, and common objects. It ensures the
			proper initialization of paths, logging, and critical objects like Excel
			application instances and database objects. This module serves as the foundation
			for setting up the environment in which other parts of the application operate.
			
			Key Responsibilities:
			- Define global paths and constants used throughout the application.
			- Initialize and manage logging with the `cLogger` class.
			- Initialize and manage global objects, including database and Excel instances.
			- Provide utility functions for environment-specific operations.
			
			Usage:
			1. Include this module in your VBA project to ensure the necessary context and
			   environment are set up before other code is executed.
			2. Use the `Init_Context` function to set up paths, logging, and other critical
			   objects when the application starts.
			3. Access global paths, objects, and constants directly from this module as needed.
			
			Dependencies:
			- Requires various classes like `cLogger`, `cAccessStatusBar`, `cDB`, `cXL_App`,
			  and others for proper functionality.
			- Utilizes Windows environment variables for user-specific settings.
			
			==============================================================================

		Public Function GetLogger(Optional Filename As String = "") As cLogger
			Initializes and returns the global logger object.
			
			If the logger (`log`) is not already initialized, it creates a new instance
			and initializes it with the specified filename. If the logger is already
			initialized but the filename does not match, it resets the file.
			
			Parameters:
			- Filename: (Optional) The name of the log file to be used.
			
			Returns:
			- A `cLogger` object initialized with the specified or default filename.

		Public Function Get_XL_App() As Excel.Application
			Initializes and returns the global Excel application object.
			
			This function ensures that an Excel application instance (`xlApp`) is
			initialized and returns it for use in other parts of the application.
			
			Returns:
			- An `Excel.Application` object.

		Public Sub Close_XL_App()
			Closes the global Excel application object if it is no longer needed.
			
			This subroutine should be called only when the application is closing
			or when the Excel instance is no longer needed for performance reasons.

		Sub Init_Path()
			Initializes the global paths used throughout the application.
			
			This subroutine sets up various paths that are used to store and retrieve
			data, templates, logs, and other necessary files in the application. The
			paths are based on the current project's location.

		Function DoYouWantToContinueOnEJPD() As Integer
			Asks the user whether to continue in the EJPD environment.
			
			This function displays a message box warning the user about potential
			application freezing issues in the EJPD environment due to library
			incompatibilities. It returns the user's choice.
			
			Returns:
			- vbOK or vbCancel depending on the user's choice.

		Function Init_Context()
			Initializes the application context and sets up global objects and settings.
			
			This function is the entry point for setting up the application's environment.
			It initializes paths, logging, user context, and other critical objects that
			are necessary for the application's operation.
			
			Returns:
			- Initializes necessary objects and variables but has no return value.

		Sub NotImplemented()
			Displays a message indicating that a function is not implemented.
			
			This subroutine can be used as a placeholder for features or functions
			that have not yet been implemented in the application.

		Sub TestMenu()
			Tests the `cDB_Menu` class by initializing it with the "APP_SMSTAT" menu.

	Module : m_DB_Code_Generator
			==============================================================================
			Module : m_DB_Code_Generator
			
			Description:
			This module generates VBA class modules based on database table definitions.
			It handles the creation of both record classes and business classes, providing
			functionality for generating variable names, determining data types, and handling
			common tasks like singularizing table names. The generated classes are used to
			facilitate data manipulation within the application by providing a structured
			and object-oriented approach to database interaction.
			
			Key Responsibilities:
			- Generate VBA classes for database records and business objects.
			- Handle variable name formatting and data type determination.
			- Create singular class names from plural table names.
			
			Usage:
			1. Include this module in your VBA project.
			2. Call the appropriate subroutines (e.g., `Generate_DB_Record_Class`, `Generate_DB_Class`)
			   to generate the required classes.
			3. Customize the generation logic as needed to fit your database schema and application needs.
			
			Dependencies:
			- Requires the `cDB_Definitions`, `cCG_DB_Record_ClassWriter`, `cCG_DB_ClassWriter`,
			  and `cCG_Variable` classes for defining tables and generating classes.
			
			==============================================================================

		Function GetVbType(dbType As String) As String
			Returns the VBA data type corresponding to a given database data type.
			
			Parameters:
			- dbType: The data type from the database (e.g., "INTEGER", "TEXT").
			
			Returns:
			- The corresponding VBA data type as a string (e.g., "Long", "String").

		Function removeExtraSpaces(str As String) As String
			Removes extra spaces from a string, leaving only single spaces between words.
			
			Parameters:
			- str: The input string with potential extra spaces.
			
			Returns:
			- The input string with extra spaces removed.

		Function isLetter(x As String) As Boolean
			Checks if the input character is a letter (A-Z).
			
			Parameters:
			- x: A single character string.
			
			Returns:
			- True if the character is a letter, otherwise False.

		Function FixedVarName(Name As String) As String
			Converts a database field name into a valid VBA variable name.
			
			Parameters:
			- Name: The original database field name.
			
			Returns:
			- The adjusted variable name that is valid in VBA.

		Function isPrimaryKey(VarDef As Variant) As Boolean
			Determines if a given variable definition corresponds to a primary key.
			
			Parameters:
			- VarDef: An array containing the variable definition elements.
			
			Returns:
			- True if the variable is a primary key, otherwise False.

		Function Singularize(tableName As String) As String
			Converts a plural table name into its singular form.
			
			Parameters:
			- tableName: The name of the table in plural form.
			
			Returns:
			- The singular form of the table name.

		Sub Generate_DB_Record_Class()
			Generates VBA classes that represent database records, based on table definitions.
			
			The generated classes include fields corresponding to database columns, with appropriate
			data types and names. The classes are written to the specified directory.
			
			This method uses the `cCG_DB_Record_ClassWriter` class to generate the class files.

		Sub Generate_DB_Class()
			Generates VBA classes that represent business objects based on table definitions.
			
			This method generates classes that can be used to manage collections of database
			records or perform business logic on them. The classes are written to the specified directory.
			
			This method uses the `cCG_DB_ClassWriter` class to generate the class files.

		Sub Generate_Classes()
			Generates general-purpose VBA classes based on the provided definitions.
			
			This method generates classes that do not directly correspond to database tables
			but may be used for other parts of the application. The classes are written to
			the specified directory.
			
			This method uses the `cCG_ClassWriter` class to generate the class files.

		Sub Test_cCG_Variable()
			Tests the `cCG_Variable` class by initializing a variable and printing its properties.

		Sub Test_cCG_CodeWriter()
			Tests the `cCG_ClassWriter` class by initializing it with variables and writing a class file.

		Sub Test_cCG_DB_CodeWriter()
			Tests the `cCG_DB_Record_ClassWriter` class by initializing it with database variables and writing a class file.

	Module : m_DB_Definitions_Exporter
			==============================================================================
			Module : m_DB_Definition_Exporter
			
			Description:
			This module is designed to export the definitions of all queries in the current
			Access database to a text file. The exported file contains the SQL definitions
			of the queries, formatted and structured for readability. It also includes a
			header with metadata about the export process.
			
			Key Responsibilities:
			- Generate a header for the export file containing metadata and structure description.
			- Export SQL definitions of all queries in the database.
			
			Usage:
			1. Include this module in your VBA project.
			2. Call the `ExportQueryDefs` subroutine with the full file path where the definitions
			   should be exported.
			3. The exported file will include a header and the SQL definitions of all queries.
			
			Dependencies:
			- Requires the `cLogger` class for managing file output and logging.
			- Utilizes standard VBA Collection objects to manage lines of text.
			
			==============================================================================

		Function FileHeader(DefType As String) As Collection
			Generates a collection of strings representing the header for the exported file.
			
			Parameters:
			- DefType: A string indicating the type of definitions being exported (e.g., "Queries").
			
			Returns:
			- A Collection object containing lines of text for the header.

		Sub ExportQueryDefs(FullName As String, Optional archive As Boolean = True)
			Exports the SQL definitions of all queries in the current database to a text file.
			
			Parameters:
			- FullName: The full file path where the query definitions will be exported.
			- archive: A boolean indicating whether to archive existing files with the same name
			  before exporting. Defaults to True.

	Module : m_DB_Utilities

		Function HasTable(tableName As String) As Boolean
			Checks if a table exists in the current database.
			
			Parameters:
			- tableName: The name of the table to check.
			
			Returns:
			- True if the table exists, otherwise False.

		Function hasIndex(Idxs As Indexes, index As String) As Boolean
			Checks if an index exists in the provided index collection.
			
			Parameters:
			- Idxs: The collection of indexes to check.
			- index: The name of the index to look for.
			
			Returns:
			- True if the index exists, otherwise False.

		Function TableHasIndex(tableName As String, index As String) As Boolean
			Checks if a table has a specific index.
			
			Parameters:
			- tableName: The name of the table to check.
			- index: The name of the index to check.
			
			Returns:
			- True if the table has the index, otherwise False.

		Function FetchId(Table As String, filter As String, Optional ByRef error As String) As Long
			Fetches the ID of the first record matching the filter in the specified table.
			
			Parameters:
			- Table: The name of the table to query.
			- filter: The filter criteria to apply.
			- error (Optional): An output parameter that returns an error message if the operation fails.
			
			Returns:
			- The ID of the matching record, or 0 if no record is found or an error occurs.

		Function FetchItems(Table As String, Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional ByRef error As String) As cDB_Records
			Fetches records from a table based on the specified filter and conditions.
			
			Parameters:
			- Table: The name of the table to query.
			- filter (Optional): The filter criteria to apply.
			- PreCondition (Optional): A condition applied before the main query.
			- PostCondition (Optional): A condition applied after the main query.
			- error (Optional): An output parameter that returns an error message if the operation fails.
			
			Returns:
			- A collection of records that match the criteria, or Nothing if an error occurs.

		Function RecordCount(Table As String) As Long
			Returns the count of records in the specified table.
			
			Parameters:
			- Table: The name of the table to count records in.
			
			Returns:
			- The count of records, or 0 if an error occurs.

		Function FetchItem(Table As String, filter As String, Optional ByRef error As String) As cDB_Record
			Fetches the first record from a table that matches the specified filter.
			
			Parameters:
			- Table: The name of the table to query.
			- filter: The filter criteria to apply.
			- error (Optional): An output parameter that returns an error message if the operation fails.
			
			Returns:
			- The matching record, or Nothing if no record is found or an error occurs.

		Sub DeleteLines(Table As String, Optional filter As String = "")
			Deletes all lines from a table according to the specified filter.
			If no filter is provided, all records in the table are deleted.
			
			Parameters:
			- Table: The name of the table to delete records from.
			- filter (Optional): The filter criteria to apply.

		Sub createTemporaryTable(Table As String, Structure As String)
			Creates a temporary table with the specified structure.
			If a table with the same name exists, it is deleted first.
			
			Parameters:
			- Table: The name of the table to create.
			- Structure: The structure of the table in SQL syntax.

		Function QueryDefinitions() As QueryDefs
			Returns the collection of all query definitions in the current database.
			
			Returns:
			- A collection of QueryDefs.

		Function QueryDefinition(QueryName As String) As QueryDef
			Returns a specific query definition by name.
			
			Parameters:
			- QueryName: The name of the query to retrieve.
			
			Returns:
			- The QueryDef object for the specified query, or Nothing if not found.

		Public Function CloseAllObjects(ParamArray varExceptions()) As Boolean
			Closes all open database objects except those specified in the exceptions list.
			
			Parameters:
			- varExceptions: A ParamArray of object names to exclude from closing.
			
			Returns:
			- True if the operation completes without errors.

		Sub DeleteInvisibleQueries()
			Deletes all invisible queries (those whose names start with a "~") from the current database.
			
			Displays a message box with the count of deleted queries.

	Module : m_dbInitDataManager
			==============================================================================
			Module : m_dbInitDataManager
			
			Description:
			This module manages the export and import of Excel sheets that are used to
			initialize relatively static database tables. It allows these sheets to be
			exported to CSV format for version control with Git and provides functionality
			to reload the data back into the original Excel file.
			
			Key Responsibilities:
			- Export sheets from an Excel file to CSV files.
			- Reload CSV files back into the original Excel file.
			
			Usage:
			1. Use `ExportSheetsToCSV` to export all sheets in the specified Excel workbook
			   to individual CSV files.
			2. Use `ReloadCSVToExistingWorkbook` to reload the data from these CSV files back
			   into the original Excel workbook.
			
			Dependencies:
			- Requires a valid Excel file path (`Common_Data_FileName`).
			- Utilizes the Microsoft Excel object library.
			
			==============================================================================

		Sub ExportSheetsToCSV()
			Exports each sheet from the specified Excel workbook to a CSV file.
			
			The CSV files are saved in the `InitDataCSVPath` directory, with each file
			named after the corresponding sheet.

		Sub ReloadCSVToExistingWorkbook()
			Reloads data from CSV files into the corresponding sheets of an existing Excel workbook.
			
			The CSV files are assumed to be in the `InitDataCSVPath` directory, with filenames
			matching the sheet names in the workbook. If a sheet does not exist, it will be created.

	Module : m_MD5
			 A VB6/VBA procedure for the MD5 message-digest algorithm
			 as described in RFC 1321 by R. Rivest, April 1992
			 First published 16 September 2005.
			 This code was originally written in Visual Basic by David Ireland
			 and is copyright (c) 2005 D.I. Management Services Pty Limited,
			 all rights reserved.
			 You are free to use this code as part of your own applications
			 provided you keep this copyright notice intact and acknowledge
			 its authorship with the words:
			   "Contains cryptography software by David Ireland of
			   DI Management Services Pty Ltd <www.di-mgt.com.au>."
			 If you use it as part of a web site, please include a link
			 to our site in the form
			 <A HREF="http://www.di-mgt.com.au/crypto.html">Cryptography
			 Software Code</a>
			 This code may only be used as part of an application. It may
			 not be reproduced or distributed separately by any means without
			 the express written permission of the author.
			 David Ireland and DI Management Services Pty Limited make no
			 representations concerning either the merchantability of this
			 software or the suitability of this software for any particular
			 purpose. It is provided "as is" without express or implied
			 warranty of any kind.
			 The latest version of this source code can be downloaded from
			 www.di-mgt.com.au/crypto.html.
			 Comments and bug reports to http://www.di-mgt.com.au/contact.html
			 POSSIBLE SPEED-UPS
			 1. Use memory copy functions from Win32 API to copy bytes into
			    32-bit words directly.
			 2. Write 16 x specific Rotate_Left_By_n functions with hardcoded
			    multiplicands for each possible shift S11..S44;
			    i.e. for n = 4-7, 9-12, 14-17, 20-23.
			Constants for MD5Transform routine
			Constants for unsigned word addition
			 TEST FUNCTIONS...
			 MD5 test suite:
			 MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
			 MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
			 MD5 ("abc") = 900150983cd24fb0d6963f7d28e17f72
			 MD5 ("message digest") = f96b697d7cb7938d525a2f31aaf161d0
			 MD5 ("abcdefghijklmnopqrstuvwxyz") = c3fcd3d76192e4007dfb496cca67e13b
			 MD5 ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") =
			 d174ab98d277d9f5a5611c2c9f419d9f
			 MD5 ("123456789012345678901234567890123456789012345678901234567890123456
			 78901234567890") = 57edf4a22be3c955ac49da2e2107b67a
			 MD5 (1 million x 'a') = 7707d6ae4e027c70eea2a935c2296f21

		Public Function Test_md5_abc()

		Public Function md5_test_suite()

		Public Function test_md5_empty()

		Public Function test_md5_around64()

		Public Function test_md5_million_a()
			This may take some time...
			MAIN EXPORTED MD5 FUNCTIONS...

		Public Function MD5_string(strMessage As String) As String
			 Returns 32-char hex string representation of message digest
			 Input as a string (max length 2^29-1 bytes)
			Cope with the empty string
			Compute length of message in bytes

		Public Function MD5_bytes(abMessage() As Byte, mLen As Long) As String
			 Returns 32-char hex string representation of message digest
			 Input as an array of bytes of length mLen bytes
			Catch length too big for VB arithmetic (268 million!)
			Initialise
			Number of complete 512-bit/64-byte blocks to process
			Load magic initialization constants
			Main loop for each complete input block of 64 bytes
			Construct final block(s) with padding
			Make sure padding (and bit-length) set to zero
			Two cases: partLen is < or >= 56
			Need two blocks
			Append number of bits in little-endian order
			(NB we don't try to cope with number greater than 2^31)
			Final padded block with bit length
			Decode 4 x 32-bit words into 16 bytes with LSB first each time
			and return result as a hex string
			INTERNAL FUNCTIONS...

		Private Sub md5_transform(state() As Long, buf() As Byte, ByVal index As Long)
			 Updates 4 x 32-bit values in state
			 Input: the next 64 bytes in buf starting at offset index
			 Assumes at least 64 bytes are present after offset index
			Decode the next 64 bytes into 16 words with LSB first
			Round 1
			Round 2
			Round 3
			Round 4
			FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4

		Private Function AddRotAdd(f As Long, a As Long, b As Long, x As Long, s As Integer, ac As Long) As Long
			 Common routine for FF, GG, HH and II
			 #define AddRotAdd(f, a, b, c, d, x, s, ac) { \
			  (a) += f + (x) + (UINT4)(ac); \
			  (a) = ROTATE_LEFT ((a), (s)); \
			  (a) += (b); \
			  }

		Private Function FF(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
			 Returns new value of a
			 #define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
			 #define FF(a, b, c, d, x, s, ac) { \
			  (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
			  (a) = ROTATE_LEFT ((a), (s)); \
			  (a) += (b); \
			  }
			F ((b), (c), (d)) = (((b) & (c)) | ((~b) & (d)))

		Private Function GG(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
			#define G(b, c, d) (((b) & (d)) | ((c) & (~d)))

		Private Function HH(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
			#define H(b, c, d) ((b) ^ (c) ^ (d))

		Private Function II(a As Long, b As Long, c As Long, d As Long, x As Long, s As Integer, ac As Long) As Long
			#define I(b, c, d) ((c) ^ ((b) | (~d)))
			Unsigned 32-bit word functions suitable for VB/VBA

		Private Function uwRol(w As Long, s As Integer) As Long
			Return 32-bit word w rotated left by s bits
			avoiding problem with VB sign bit

		Private Function uwJoin(a As Byte, b As Byte, c As Byte, d As Byte) As Long
			Join 4 x 8-bit bytes into one 32-bit word a.b.c.d

		Private Sub uwSplit(ByVal w As Long, a As Byte, b As Byte, c As Byte, d As Byte)
			Split 32-bit word w into 4 x 8-bit bytes

		Private Function uwAdd(wordA As Long, wordB As Long) As Long
			Adds words A and B avoiding overflow
			Cope with overflow
			These two functions from Microsoft Article Q189323
			"HOWTO: convert between Signed and Unsigned Numbers"

		Private Function UnsignedToLong(value As Double) As Long

		Private Function LongToUnsigned(value As Long) As Double
			End of Microsoft-article functions

		Sub testMD5()
			Tests the MD5 hash function by comparing the hash of the same string twice.

	Module : m_String_Utilities

		Function ReplicateQuote(Text As String) As String
			Duplicates any single quotes found in the input text.
			
			Parameters:
			- Text: A string in which single quotes will be duplicated.
			
			Returns:
			- A string where each single quote in the original text is duplicated.
			

		Function cleanup(Text As String) As String
			Cleans up a string by trimming whitespace and removing outer single quotes if they exist.
			
			Parameters:
			- Text: A string that may contain leading and trailing single quotes.
			
			Returns:
			- A string with leading and trailing single quotes removed, if present.
			

		Function EscapeDelim(Text As String) As String
			Escapes any single quotes in the input text by duplicating them.
			
			Parameters:
			- Text: A string that may contain single quotes.
			
			Returns:
			- A string with all single quotes escaped by duplication.
			

		Public Function NextCommaPos(ByRef Text As String) As Integer
			Finds the position of the next comma in a comma-delimited string, accounting for quoted segments.
			
			Parameters:
			- Text: A comma-delimited string that may contain quoted segments.
			
			Returns:
			- The position of the next comma outside any quoted segments.
			

		Function toDouble(Val As Variant) As Double
			Converts a given value to a double, removing any thousand separators.
			
			Parameters:
			- Val: The value to convert, which may be a string or numeric.
			
			Returns:
			- The value converted to a Double, or 0 if conversion is not possible.
			

		Function cleanStr(str As String) As String
			Cleans a string by retaining only alphanumeric characters, spaces, and certain special characters.
			
			Parameters:
			- str: The input string to be cleaned.
			
			Returns:
			- A cleaned string containing only alphanumeric characters, spaces, and specific special characters.
			

		Function RemoveMultipleSpaces(str As String) As String
			Removes multiple consecutive spaces in a string, replacing them with a single space.
			
			Parameters:
			- str: The input string potentially containing multiple consecutive spaces.
			
			Returns:
			- A string with multiple spaces reduced to a single space.
			

		Function FileNameFromPath(Path As String) As String
			Extracts the filename from a full file path.
			
			Parameters:
			- Path: The full file path from which to extract the filename.
			
			Returns:
			- The filename extracted from the path.
			

		Function AddSemicolonIfMissing(str As String) As String
			Ensures that a string ends with a semicolon.
			
			Parameters:
			- str: The input string to check.
			
			Returns:
			- The string with a semicolon appended if it was missing.
			

		Function CreateShortName(inputString As String) As String
			Generates a short name by extracting capital letters and digits from a string.
			
			Parameters:
			- inputString: The input string from which to generate a short name.
			
			Returns:
			- A short name composed of capital letters and digits from the input string.
			

		Function CreateTitle(inputString As String) As String
			Converts a string to title format, replacing underscores with spaces and adding spaces before capital letters.
			
			Parameters:
			- inputString: The input string to format as a title.
			
			Returns:
			- The title-formatted string.
			

		Function ExtractFirstWord(inputString As String) As String
			Extracts the first word from a string, defined as the characters before the first underscore or space.
			
			Parameters:
			- inputString: The input string from which to extract the first word.
			
			Returns:
			- The first word from the input string, or an empty string if no word is found.
			

		Function CountWords(inputString As String) As Integer
			Counts the number of words in a string.
			
			Parameters:
			- inputString: The input string in which to count words.
			
			Returns:
			- The number of words in the input string.
			

		Function DefaultRatioTitle(inputString As String) As String
			Generates a default title for ratio expressions in a string by extracting components and formatting them.
			
			Parameters:
			- inputString: The input string containing a ratio expression.
			
			Returns:
			- A formatted title string for the ratio, or "No match found" if no ratio expression is identified.
			

	Module : m_Test

		Sub DoTestSuite()
			Initializes the context and runs all test functions in modules with the prefix `m_Test_`.
			Outputs the results to the Immediate Window (Debug.Print).

		Function test(Name As String) As Boolean
			Runs all procedures in a specified module and checks if they return True.
			
			Parameters:
			- Name: The name of the module to test.
			
			Returns:
			- True if all test procedures pass, False otherwise.

	Module : m_Test_Autogenerated_DB_Classes
			Tests for the cDB_Settings class.
			Each function tests a specific method or property within the class.
			Functions return True if the test passes, and False otherwise.

		Function Test_cDB_Setting_id() As Boolean
			Tests if the correct ID is returned for a setting with the name 'Test_Setting'.

		Function Test_ParameterPValue() As Boolean
			Tests if the correct PValue is returned for a setting with the name 'Test_Setting'.

		Function Test_ParameterPBoolean() As Boolean
			Tests if the correct PBoolean is returned for a setting with the name 'Test_Setting'.

	Module : m_Test_cDB_Instruction
			The sequence of the test functions is important because the state of the table is used.
			This module tests various operations on a test database table using cDB_Instruction.

		Function CreateTestTable() As Boolean
			Creates a test table named 'tbl_Testcasinos'.
			Returns True if the table is created successfully, False otherwise.

		Function TableExistsInCurrentDB() As Boolean
			Checks if the test table 'tbl_Testcasinos' exists in the current database.
			Returns True if the table exists, False otherwise.

		Function CreateIndex() As Boolean
			Creates an index on the 'Test' column in the test table.
			Returns True if the index is created successfully, False otherwise.

		Function CreateIndexUsingInstruction() As Boolean
			Creates an index on the 'City' column using cDB_Instruction.
			Returns True if the index is created successfully, False otherwise.

		Function CheckIfIndexNotExist() As Boolean
			Checks if the index 'CityXXXIdx' does not exist in the test table.
			Returns True if the index does not exist, False otherwise.

		Function CheckIfIndexExist() As Boolean
			Checks if the index 'CityIdx' exists in the test table.
			Returns True if the index exists, False otherwise.

		Function CheckIfTableHasIndex() As Boolean
			Checks if the test table 'tbl_Testcasinos' has the index 'CityIdx'.
			Returns True if the index exists, False otherwise.

		Function TestExistsTable() As Boolean
			Tests the ExistsTable method for the test table and a non-existent table.
			Returns True if the test passes, False otherwise.

		Function AddRecord() As Boolean
			Adds a record to the test table and verifies the operation.
			Returns True if the record is added successfully, False otherwise.

		Function ReadRecord_UsingInitialize() As Boolean
			Reads a record from the test table using Initialize method and verifies it.
			Returns True if the record matches, False otherwise.

		Function ReadRecord_UsingInitializeByString() As Boolean
			Reads a record from the test table using InitFromStr method and verifies it.
			Returns True if the record matches, False otherwise.

		Function AddRecordWithQuotes() As Boolean
			Adds a record with quotes in the field values and verifies the operation.
			Returns True if the record is added and retrieved successfully, False otherwise.

		Function DeleteRecord() As Boolean
			Deletes a record from the test table and verifies the operation.
			Returns True if the record is deleted successfully, False otherwise.

		Function AddAndDeleteRecord() As Boolean
			Adds and then deletes a record from the test table, verifying each operation.
			Returns True if the operations are successful, False otherwise.

		Function UpdateRecord() As Boolean
			Updates a record in the test table and verifies the operation.
			Returns True if the record is updated successfully, False otherwise.

		Function MinId() As Boolean
			Retrieves the minimum 'id' value from the test table and verifies the result.
			Returns True if the result matches the expected value, False otherwise.

		Function MaxId() As Boolean
			Retrieves the maximum 'id' value from the test table and verifies the result.
			Returns True if the result matches the expected value, False otherwise.

		Function FirstId() As Boolean
			Retrieves the first 'id' value from the test table and verifies the result.
			Returns True if the result matches the expected value, False otherwise.

		Function LastId() As Boolean
			Retrieves the last 'id' value from the test table and verifies the result.
			Returns True if the result matches the expected value, False otherwise.

		Function SumId() As Boolean
			Retrieves the sum of 'id' values from the test table and verifies the result.
			Returns True if the result matches the expected value, False otherwise.

		Function DeleteTestTable() As Boolean
			Deletes the test table 'tbl_Testcasinos'.
			Returns True if the table is deleted successfully, False otherwise.

	Module : m_Test_cDB_Record

		Function CreateAndReadField() As Boolean

		Function FieldIsIdentiqueAs() As Boolean

		Function CreateAndReadRecord() As Boolean

		Function CreateRecordAndReadValue() As Boolean

		Function RecordIsIdentiqueAs() As Boolean

	Module : m_Test_cDB_ResourceStrings
			This test suite requires an initialized tbl_Resources where IDM_EDIT is defined.
			The sequence of the test functions is important as they test various resource string retrieval scenarios.

		Function getStringWithoutLanguageDefinition() As Boolean
			Tests retrieval of a resource string without specifying a language.
			Returns True if the correct string is returned, False otherwise.

		Function getStringWithLanguageDefinitionFromGlobal() As Boolean
			Tests retrieval of a resource string using the global language definition.
			Returns True if the correct string is returned for the global language, False otherwise.

		Function getStringWithLanguageDefinition() As Boolean
			Tests retrieval of a resource string by explicitly specifying the language.
			Returns True if the correct string is returned for the specified language, False otherwise.

		Function getStringWithUndefinedLanguage() As Boolean
			Tests retrieval of a resource string with an undefined language.
			Returns True if the fallback string (typically English) is returned, False otherwise.

		Function getNonExistentString() As Boolean
			Tests retrieval of a non-existent resource string.
			Returns True if the function returns the key itself when the string does not exist, False otherwise.

	Module : m_Test_cDB_User
			This test suite verifies the functionality of the `cDB_User` class by performing operations
			such as adding, removing, and initializing users, and by checking user properties like
			username, password, name, first name, admin status, and lock status.

		Function addTestUser() As Boolean
			Adds a test user to the `Users` table and verifies the addition.
			Returns True if the user is added successfully and the record matches, False otherwise.

		Function removeTestUser() As Boolean
			Removes the test user from the `Users` table and verifies the removal.
			Returns True if the user is removed successfully, False otherwise.

		Function initializeUser() As Boolean
			Initializes the `cDB_User` object for the test user and verifies successful initialization.
			Returns True if the user is initialized successfully, False otherwise.

		Function USERNAME() As Boolean
			Verifies that the `USERNAME` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected value, False otherwise.

		Function Password() As Boolean
			Verifies that the `Password` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected MD5 hashed value, False otherwise.

		Function Name() As Boolean
			Verifies that the `Name` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected value, False otherwise.

		Function Firstname() As Boolean
			Verifies that the `Firstname` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected value, False otherwise.

		Function isLocked() As Boolean
			Verifies that the `isLocked` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected value, False otherwise.

		Function isAdmin() As Boolean
			Verifies that the `isAdmin` property of the `cDB_User` object is correctly set.
			Returns True if the property matches the expected value, False otherwise.

	Module : m_Test_cDB_XXX
			This module tests the functionality of Template class that will be used
			by all Table's objects generated.
			It's important to test every new functionality added to the template `cDB_XXXs` class,
			which is a database class that manages records for the `XXXs` table.

		Function Test_IsAvailable() As Boolean
			Tests if the `cDB_XXXs` class is available and initialized properly.
			Returns True if the class is available, False otherwise.

		Function Test_HasIndex() As Boolean
			Tests if the `cDB_XXXs` class does not have a specific index.
			Returns True if the index does not exist, False otherwise.

		Function FillTable() As Boolean
			Fills the `XXXs` table with test data.
			Returns True if the table contains 3 records after filling, False otherwise.

		Function Test_Id() As Boolean
			Tests if the `id` method of `cDB_XXXs` correctly identifies records.
			Returns True if the method correctly identifies the records, False otherwise.

		Function Test_Count() As Boolean
			Tests if the `count` method of `cDB_XXXs` returns the correct number of records.
			Returns True if the count is correct, False otherwise.

		Function Test_Delete() As Boolean
			Tests if the `Delete` method of `cDB_XXXs` correctly deletes records.
			Returns True if the records are deleted correctly, False otherwise.

		Function Test_DeleteALL() As Boolean
			Tests if the `DeleteAll` method of `cDB_XXXs` correctly deletes all records.
			Returns True if all records are deleted, False otherwise.

		Function Test_Records() As Boolean
			Tests if the `records` method of `cDB_XXXs` returns the correct records.
			Returns True if the correct records are returned, False otherwise.

		Function Test_Collection() As Boolean
			Tests if the `Collection` method of `cDB_XXXs` returns the correct collection of records.
			Returns True if the correct collection is returned, False otherwise.

		Function Test_XXX() As Boolean
			Tests if the `Item` and `XXX` methods of `cDB_XXXs` correctly retrieve specific records.
			Returns True if the records are retrieved correctly, False otherwise.

	Module : m_Test_cLogger
			This module tests the functionality of the `cLogger` class, which is responsible for logging events.

		Function TestNewLogger() As Boolean
			Tests the initialization of a new logger instance.
			Returns True if the logger is initialized correctly and the log file exists, False otherwise.

		Function TestNewLoggerArchive() As Boolean
			Tests the initialization of a new logger instance with archiving enabled.
			Returns True if the logger is initialized correctly and the archived log file has the correct prefix, False otherwise.

		Function TestLogEvent() As Boolean
			Tests logging of multiple events to the log file.
			Returns True if the events are logged correctly and the line count matches the expected value, False otherwise.

		Function TestResetFile() As Boolean
			Tests the resetting of the log file.
			Returns True if the log file is reset correctly and the line count is 1, False otherwise.

		Function TestResetFileNewName() As Boolean
			Tests resetting the log file with a new name.
			Returns True if the log file is reset with the new name, False otherwise.

	Module : m_Test_DB_Code_Generator
			This module tests the functionality of the `Singularize` function,
			which converts plural words to their singular form.

		Function Test_Singularize_ies() As Boolean
			Tests the `Singularize` function with a word ending in "ies".
			Returns True if "Countries" is correctly singularized to "Country", False otherwise.

		Function Test_Singularize_ses() As Boolean
			Tests the `Singularize` function with a word ending in "ses".
			Returns True if "Classes" is correctly singularized to "Class", False otherwise.

		Function Test_Singularize_ches() As Boolean
			Tests the `Singularize` function with a word ending in "ches".
			Returns True if "Switches" is correctly singularized to "Switch", False otherwise.

		Function Test_Singularize_shes() As Boolean
			Tests the `Singularize` function with a word ending in "shes".
			Returns True if "Lashes" is correctly singularized to "Lash", False otherwise.

		Function Test_Singularize_xes() As Boolean
			Tests the `Singularize` function with a word ending in "xes".
			Returns True if "Boxes" is correctly singularized to "Box", False otherwise.

		Function Test_Singularize_zes() As Boolean
			Tests the `Singularize` function with a word ending in "zes".
			Returns True if "Buzzes" is correctly singularized to "Buzz", False otherwise.

		Function Test_Singularize_ia() As Boolean
			Tests the `Singularize` function with a word ending in "ia".
			Returns True if "Media" is correctly singularized to "Medium", False otherwise.

		Function Test_Singularize_criteria() As Boolean
			Tests the `Singularize` function with the irregular word "criteria".
			Returns True if "criteria" is correctly singularized to "Criterion", False otherwise.

		Function Test_Singularize_XXX() As Boolean
			Tests the `Singularize` function with a custom irregular word "XXXs".
			Returns True if "XXXs" is correctly singularized to "XXX", False otherwise.

	Module : m_Test_DB_Utilities
			The sequence of the test functions is important because the state of the table is used.
			This test suite assumes the database is already created and contains some data.

		Function TestFetchItems() As Boolean
			Tests the `FetchItems` function by retrieving records from the "ResourceStrings" table.
			Returns True if items are retrieved successfully, False otherwise.
			If no items are found, it logs a debug message.

		Function TestFetchItem() As Boolean
			Tests the `FetchItem` function by retrieving a specific record from the "ResourceStrings" table.
			Returns True if the record with Ref "OK" is found and correctly initialized, False otherwise.
			If the record is not found or does not match the expected value, it logs a debug message.

	Module : m_Test_m_MD5

		Function Encryption() As Boolean
			Tests the MD5 encryption by encoding a numeric password and checking the length of the encoded string.
			Returns True if the encoded string is 32 characters long, which is the expected length of an MD5 hash.

		Function EncryptionCheckOk() As Boolean
			Tests the consistency of the MD5 encryption by encoding the same password twice and comparing the results.
			Returns True if both encoded strings are identical, indicating that the encryption is consistent.

		Function EncryptionCheckNotOk() As Boolean
			Tests the MD5 encryption by encoding a password and comparing it to an encoding of a different password.
			Returns True if the two encoded strings are different, which is the expected behavior.

	Module : m_Test_m_String_Utilities

		Function Test_ReplicateQuote() As Boolean
			Tests the ReplicateQuote function by checking if it correctly doubles the single quotes in a string.
			Returns True if the quotes are correctly replicated, False otherwise.

		Function Test_CleanUp() As Boolean
			Tests the cleanup function to ensure it correctly trims leading and trailing spaces and removes surrounding single quotes.
			Returns True if the string is correctly cleaned, False otherwise.

		Function Test_EscapeDelim() As Boolean
			Tests the EscapeDelim function to verify that it correctly escapes single quotes in a string.
			Returns True if the quotes are correctly escaped, False otherwise.

		Function Test_NextCommaPos() As Boolean
			Tests the NextCommaPos function to ensure it correctly identifies the positions of commas in a complex string.
			Returns True if the positions are correctly identified, False otherwise.

		Function TestRemoveMultipleSpaces() As Boolean
			Tests the RemoveMultipleSpaces function to ensure it correctly reduces multiple spaces to a single space.
			Returns True if the spaces are correctly reduced, False otherwise.

		Function Test_CreateShortName() As Boolean
			Tests the CreateShortName function by verifying it creates the correct short name from a given string.
			Returns True if the short name is correct, False otherwise.

		Function Test_CreateTitle() As Boolean
			Tests the CreateTitle function by verifying it creates a correctly formatted title from a given string.
			Returns True if the title is correctly formatted, False otherwise.

		Function Test_ExtractFirstWord() As Boolean
			Tests the ExtractFirstWord function by verifying it correctly extracts the first word from a given string.
			Returns True if the first word is correctly extracted, False otherwise.

		Function Test_CountWords() As Boolean
			Tests the CountWords function by verifying it correctly counts the number of words in a given string.
			Returns True if the word count is correct, False otherwise.

		Function Test_DefaultRatioTitle() As Boolean
			Tests the DefaultRatioTitle function by verifying it correctly formats a ratio string.
			Returns True if the ratio string is correctly formatted, False otherwise.

	Module : m_Test_Utilities
			Tests various utility functions to ensure they work correctly with different data types.
			Tests the IsLong function with an Integer input.
			Returns True if the function correctly identifies the input as not a Long.

		Function Test_IsLong_with_Integer() As Boolean
			Tests the IsLong function with a String input.
			Returns True if the function correctly identifies the input as not a Long.

		Function Test_IsLong_with_String() As Boolean
			Tests the IsLong function with a Double input.
			Returns True if the function correctly identifies the input as not a Long.

		Function Test_IsLong_with_Double() As Boolean
			Tests the IsLong function with a Long input.
			Returns True if the function correctly identifies the input as a Long.

		Function Test_IsLong_with_Long() As Boolean
			Tests the IsInteger function with an Integer input.
			Returns True if the function correctly identifies the input as an Integer.

		Function Test_IsInteger_with_Integer() As Boolean
			Tests the IsDouble function with a Double input.
			Returns True if the function correctly identifies the input as a Double.

		Function Test_IsDouble_with_Double() As Boolean
			Tests the IsString function with a String input.
			Returns True if the function correctly identifies the input as a String.

		Function Test_IsString_with_String() As Boolean
			Tests the CastToLong function with a String input.
			Returns True if the function correctly fails to cast the input to a Long.

		Function Test_CastToLong_with_String() As Boolean
			Tests the CastToLong function with an Integer input.
			Returns True if the function correctly casts the input to a Long.

		Function Test_CastToLong_with_Integer() As Boolean
			Tests the MD5 encryption function.
			Returns True if the encrypted string has a length of 32 characters.

		Function Test_Encryption() As Boolean
			Tests if the MD5 encryption produces consistent results for the same input.
			Returns True if the two encrypted strings are identical.

		Function Test_EncryptionCheckOk() As Boolean
			Tests the GetLastModifiedDate function to ensure it returns consistent results.
			Returns True if the function returns a valid date that matches expected results.

		Function Test_GetLastModifiedDate() As Boolean

	Module : m_Utilities
			==============================================================================
			Module : Utilites
			
			Description:
			This module provides a collection of utility functions and subroutines that
			perform a variety of tasks, including working with Excel sheets, handling
			file system operations, and generating cryptographic hashes. These functions
			are designed to simplify common tasks in VBA and make code more readable and
			maintainable.
			
			Key Responsibilities:
			- Managing Excel sheet data and references.
			- Performing file system operations like checking file existence, creating text
			  files, and retrieving file metadata.
			- Providing helper functions for data type checking and conversion.
			- Generating MD5 hash strings for given inputs.
			
			Usage:
			1. Include this module in your VBA project.
			2. Call the appropriate functions as needed in your code to handle Excel sheets,
			   file operations, and other utility tasks.
			
			Dependencies:
			- Requires the `cLogger` class for error logging in some functions.
			- Utilizes the Microsoft Scripting Runtime for file system operations.
			
			==============================================================================

		Function lastRow(sh As Worksheet, Col As Long) As Long
			Returns the last row number with data in a specified column of a worksheet.
			
			Parameters:
			- sh: The worksheet object.
			- Col: The column number to check for the last used row.
			
			Returns:
			- The row number of the last non-empty cell in the specified column.

		Function lastCol(sh As Worksheet, Row As Long) As Long
			Returns the last column number with data in a specified row of a worksheet.
			
			Parameters:
			- sh: The worksheet object.
			- Row: The row number to check for the last used column.
			
			Returns:
			- The column number of the last non-empty cell in the specified row.

		Public Function FileFolderExists(strFullPath As String) As Boolean
			Checks if a file or folder exists at the given path.
			
			Parameters:
			- strFullPath: The full path to the file or folder.
			
			Returns:
			- True if the file or folder exists, otherwise False.

		Sub AddSheet(Name As String)
			Adds a new worksheet to the workbook if it does not already exist.
			
			Parameters:
			- Name: The name of the worksheet to add.

		Function HasKey(coll As Collection, strKey As String) As Boolean
			Checks if a key exists in a collection.
			
			Parameters:
			- coll: The collection to check.
			- strKey: The key to check for in the collection.
			
			Returns:
			- True if the key exists, otherwise False.

		Function IsLong(Val As Variant) As Boolean
			Checks if a given value is of type Long.
			
			Parameters:
			- Val: The value to check.
			
			Returns:
			- True if the value is a Long, otherwise False.

		Function IsString(Val As Variant) As Boolean
			Checks if a given value is of type String.
			
			Parameters:
			- Val: The value to check.
			
			Returns:
			- True if the value is a String, otherwise False.

		Function IsDouble(Val As Variant) As Boolean
			Checks if a given value is of type Double.
			
			Parameters:
			- Val: The value to check.
			
			Returns:
			- True if the value is a Double, otherwise False.

		Function IsInteger(Val As Variant) As Boolean
			Checks if a given value is of type Integer.
			
			Parameters:
			- Val: The value to check.
			
			Returns:
			- True if the value is an Integer, otherwise False.

		Function CastToLong(Val As Variant, ByRef result As Long) As Boolean
			Attempts to cast a given value to a Long data type.
			
			Parameters:
			- Val: The value to cast.
			- result: The variable to store the cast result.
			
			Returns:
			- True if the cast is successful, otherwise False.

		Function archiveName(fName As String) As String
			Generates an archive name by appending the current date and time to the filename.
			
			Parameters:
			- fName: The original file name.
			
			Returns:
			- A new string with the archive prefix and the original file name.

		Sub FSOCreateAndWriteToTextFile()
			Creates a text file and writes a line of text to it.
			
			This subroutine demonstrates creating a text file using the FileSystemObject and
			writing a single line to it. The file is created in the specified location.
			
			Note: Adjust the file path as needed.

		Function GetLastModifiedDate(fullPath As String) As Date
			Retrieves the last modified date of a file.
			
			Parameters:
			- fullPath: The full path of the file.
			
			Returns:
			- The date and time the file was last modified, or a very old date if the file doesn't exist.

		Function MD5(ByVal sIn As String) As String
			Generates an MD5 hash for a given input string.
			
			Parameters:
			- sIn: The input string to hash.
			
			Returns:
			- The MD5 hash of the input string as a hexadecimal string.
			
			Note: Ensure that the required references are set for MD5 functionality.

		Function ConvertCellReferencesintoA1(Row As Long, column As Long) As String
			Converts row and column indices into an A1-style Excel cell reference.
			
			Parameters:
			- Row: The row index.
			- column: The column index.
			
			Returns:
			- The corresponding cell reference in A1 notation (e.g., "A1").

		Public Function FindRowWithRef(r As Excel.Range, Ref As String) As Long
			Finds the row number that contains a specific reference in a given range.
			
			Parameters:
			- r: The range to search within.
			- Ref: The reference string to find.
			
			Returns:
			- The row number where the reference is found, or an error if not found.

		Sub AddCrosstabQuery()
			Adds a crosstab query to the current database.
			
			This subroutine creates a new crosstab query in the current Access database
			based on the SQL string provided. The query is first deleted if it already exists.
			
			Note: Adjust the SQL string and query name as needed.

		Function SheetExists(SheetName As String, wb As Workbook) As Boolean
			Checks if a sheet with the given name exists in the workbook.
			
			Parameters:
			- SheetName: The name of the sheet to check.
			- wb: The workbook in which to check for the sheet.
			
			Returns:
			- True if the sheet exists, otherwise False.

		Sub testReporter()
			Tests the `cAutoDocReporter` by generating a documentation report for a specific module.

	Module : m_XL_DBTables
			==============================================================================
			Module : ExcelDataTransfer
			
			Description:
			This module provides utilities for transferring data between Access tables and
			Excel worksheets. It includes subroutines to export multiple or single tables
			to Excel, and to import data from Excel back into Access. Special handling is
			provided for importing data row by row to avoid truncation of text fields.
			
			Key Responsibilities:
			- Export Access tables to Excel files.
			- Import Excel worksheets into Access tables.
			- Handle potential errors during data transfer operations and log them appropriately.
			
			Dependencies:
			- Requires the `cLogger` class for logging errors and events.
			- Utilizes the `cXL` class for Excel workbook handling.
			
			Usage:
			1. Call `SaveTablesToXLData` to export a collection of tables to Excel.
			2. Use `LoadTablesFromXLData` to import multiple worksheets back into Access.
			3. Use `LoadTableFromXLData2` for line-by-line import to handle large text fields.
			
			==============================================================================

		Sub SaveTablesToXLData(tables As Collection, fullExportPath As String)
			Exports each table in the given collection to an Excel file at the specified path.
			
			Parameters:
			- tables: A collection of table names to be exported.
			- fullExportPath: The file path where the Excel file will be saved.

		Sub SaveTableToXLData(Table As String, fullExportPath As String)
			Exports a single table to an Excel file at the specified path.
			
			Parameters:
			- Table: The name of the table to be exported.
			- fullExportPath: The file path where the Excel file will be saved.

		Sub LoadTablesFromXLData(fullPath As String)
			Imports data from each worksheet in the specified Excel file into corresponding Access tables.
			
			Parameters:
			- fullPath: The file path of the Excel file to be imported.

		Sub LoadTableFromXLData(fullPath As String, Table As String)
			Imports data from a specific worksheet in the specified Excel file into an Access table.
			
			Parameters:
			- fullPath: The file path of the Excel file to be imported.
			- Table: The name of the Access table to be populated.

		Sub LoadTableFromXLData2(fullPath As String, Table As String, Optional firstRow As Long = 2)
			Imports data from a specific worksheet in the Excel file into an Access table,
			processing each row individually to avoid truncation of text fields longer than 255 characters.
			
			Parameters:
			- fullPath: The file path of the Excel file to be imported.
			- Table: The name of the Access table to be populated.
			- firstRow: The first row of data to be imported (default is 2, assuming row 1 contains headers).

	Module : m_XL_Exporter
			==============================================================================
			Module : ExcelWorksheetFormatting
			
			Description:
			This module provides functions to format Excel worksheets, create index sheets,
			add total rows, and export cross-tab data from Access to Excel. These utilities
			are useful for generating well-structured and formatted Excel reports directly
			from Access VBA.
			
			Key Responsibilities:
			- Format Excel worksheets with borders, headers, and data formatting.
			- Create an index sheet that lists all cross-tab query results.
			- Add a total row to the bottom of an Excel worksheet.
			- Export cross-tab data from Access to Excel and generate corresponding charts.
			
			Dependencies:
			- Requires the Excel Object Library for handling Excel operations.
			- Requires DAO for accessing and querying the Access database.
			
			Usage:
			1. Call `FormatWorkSheet` to apply consistent formatting to an Excel worksheet.
			2. Use `CreateIndexSheet` to generate an index of cross-tab query results.
			3. Use `AddTotalRow` to add a sum row at the bottom of an Excel table.
			4. Call `ExportCrossTabCasinoYearToExcel` to export data and create charts.
			
			==============================================================================

		Sub FormatWorkSheet(ws As Worksheet)
			Formats the entire worksheet by applying borders, styling headers, and
			setting the number format for data cells. This function ensures that the
			worksheet is presented in a clean and professional manner.
			
			Parameters:
			- ws: The Excel worksheet to be formatted.

		Sub CreateIndexSheet(wb As Workbook, Name As String, resource_strings As cDB_ResourceStrings, Operation As String)
			Creates an index sheet in the specified workbook, listing titles, sheet prefixes,
			and query names from the 'CrossviewInfos' table in Access, filtered by the operation.
			
			Parameters:
			- wb: The Excel workbook where the index sheet will be added.
			- Name: The name of the sheet to be created.
			- resource_strings: A resource string manager for translating titles.
			- Operation: The operation filter to be applied to the 'CrossviewInfos' table.

		Sub AddTotalRow(ws As Worksheet)
			Adds a total row at the bottom of the Excel worksheet, summing up
			all numeric columns.
			
			Parameters:
			- ws: The Excel worksheet where the total row will be added.

		Sub ExportCrossTabCasinoYearToExcel(wb As Workbook, Title As String, QueryName As String, X_Name As String, Y_Name As String, SheetPrefix As String)
			Exports a cross-tab query from Access to an Excel workbook, creates a new worksheet
			for the data, and generates a corresponding line chart.
			
			Parameters:
			- wb: The Excel workbook where the data and chart will be added.
			- Title: The title of the chart.
			- QueryName: The name of the cross-tab query in Access.
			- X_Name: The label for the X-axis (typically years).
			- Y_Name: The label for the Y-axis (typically values).
			- SheetPrefix: The prefix used for naming the Excel sheets.

Classes Documentation

	Class : cAccessStatusBar
			==============================================================================
			Class : cAccessStatusBar
			
			Description:
			The `cAccessStatusBar` class simplifies the management of the Access status bar,
			particularly for displaying progress meters and status messages during operations.
			It provides methods for initializing, updating, and clearing the status bar,
			as well as managing the progress meter in a streamlined manner.
			
			Key Responsibilities:
			- Initialize and display a progress meter on the Access status bar.
			- Update the progress meter as tasks are processed.
			- Display and update status messages on the status bar.
			- Clear the status bar and remove the progress meter when operations are complete.
			
			Dependencies:
			- Utilizes Access's built-in `SysCmd` function for managing the status bar.
			
			Usage:
			1. Use `InitMeter` to initialize the progress meter with a message and the maximum value.
			2. Use `UpdateMeter` or `NextMeter` to update the progress meter as tasks progress.
			3. Use `SetStatus` to display custom messages on the status bar.
			4. Use `ClearStatus` and `RemoveMeter` to clear the status bar and remove the meter.
			
			Example:
			Dim statusBar As New cAccessStatusBar
			statusBar.InitMeter "Processing records...", 100
			For i = 1 To 100
			    ' Process records...
			    statusBar.NextMeter
			Next i
			statusBar.ClearStatus
			statusBar.RemoveMeter
			
			==============================================================================

		Sub InitMeter(msg As String, MaxMeter As Long)
			Initializes the status bar with a progress meter.
			
			Parameters:
			- msg: The message to display on the status bar.
			- MaxMeter: The total number of elements to be processed, representing the maximum value of the progress meter.

		Sub UpdateMeter(value As Long)
			Updates the current position of the progress meter.
			This should be called with a value less than or equal to the total number of elements.
			
			Parameters:
			- value: The current value to set the progress meter to.

		Sub NextMeter(Optional Increment As Long = 1)
			Increments the progress meter by a specified amount.
			This is typically used within a loop to advance the meter as each task is completed.
			
			Parameters:
			- Increment: (Optional) The amount to increment the meter by. Default is 1.

		Sub SetStatus(msg As String)
			Sets a new message on the status bar.
			
			Parameters:
			- msg: The message to display on the status bar.

		Sub ClearStatus()
			Clears any message currently displayed on the status bar.

		Sub RemoveMeter()
			Removes the progress meter from the status bar.

		Sub Class_Terminate()
			Cleans up the status bar by clearing the message and removing the meter when the object is destroyed.

	Class : cAutoDocReporter
			==============================================================================
			Class : cAutoDocReporter
			
			Description:
			The `cAutoDocReporter` class is designed to automate the documentation process
			for a VBA project. It scans the entire project, including all modules, classes,
			and forms, extracting and organizing the function headers and associated docstrings
			(lines beginning with two single quotes ''). The output is a text document that
			provides a structured overview of the project's codebase.
			
			Key Responsibilities:
			- Scan and document all standard modules, class modules, and form modules.
			- Extract function and procedure headers along with their associated docstrings.
			- Generate a comprehensive text report documenting the entire project.
			
			Dependencies:
			- Requires the 'ArrayList' class for managing collections of modules, classes, and forms.
			- Utilizes the 'cLogger' class for writing the output to a text file.
			
			Usage:
			1. Initialize the `cAutoDocReporter` class with a log file path.
			2. Call `DocumentProject` to generate the documentation for the entire project.
			
			Example:
			Dim reporter As New cAutoDocReporter
			reporter.Initialize "C:\Path\To\Documentation.txt"
			reporter.DocumentProject
			
			==============================================================================
			Initializes the `cAutoDocReporter` instance and sets up the logging mechanism.
			
			Parameters:
			- FullFileName: The full path to the log file where the documentation will be saved.
			- DebugPrint: (Optional) A Boolean indicating whether to print debug information to the console. Default is True.

		Sub Initialize(FullFileName As String, Optional DebugPrint As Boolean = True)
			Documents the entire VBA project by scanning all modules, classes, and forms.
			The results are written to the log file specified during initialization.

		Sub DocumentProject()
			Checks if a given line of code is an autodoc line (starts with two single quotes).
			If it is, the line is reformatted by removing the leading three characters.
			
			Parameters:
			- Line: The line of code to check and potentially reformat.
			
			Returns:
			- Boolean: True if the line is an autodoc line, otherwise False.

		Function AutoDocLine(ByRef Line As String) As Boolean
			Documents a single module (standard module, class module, or form module).
			The module's name and type are logged, followed by the function headers and
			autodoc lines contained within the module.
			
			Parameters:
			- Name: The name of the module to document.
			- ModType: The type of the module (e.g., "Module", "Class", "Form").

		Sub DocumentModule(Name As String, ModType As String)

	Class : cCG_ClassWriter
			==============================================================================
			Class : cCG_ClassWriter
			
			Description:
			This class automates the generation of VBA class modules by assembling various
			components such as headers, variable declarations, property procedures (Get/Set),
			and initialization methods. It leverages a collection of variables to dynamically
			create structured and well-formatted class files, facilitating rapid and consistent
			code generation.
			
			Key Responsibilities:
			- Define and store class names and associated variables.
			- Generate standard VBA class headers with appropriate attributes and metadata.
			- Create variable declarations based on provided variable definitions.
			- Construct Get and Set property procedures for encapsulation and data access control.
			- Generate an Initialize subroutine to set up class instances with provided values.
			- Compile and write the complete class code to a file using a logging mechanism.
			
			Dependencies:
			- Requires the 'ArrayList' class for managing collections of variables.
			- Utilizes the 'cLogger' class for writing output to files.
			- Relies on the 'cComparer' class for sorting variables based on specified criteria.
			
			Usage:
			1. Initialize the class with a class name and an optional collection of variables.
			2. Call 'WriteClass' with a specified path to generate and save the class file.
			
			Example:
			Dim classWriter As New cCG_ClassWriter
			classWriter.Initialize "MyClassName", myVariablesArrayList
			classWriter.WriteClass "C:\Path\To\Output\"
			
			==============================================================================

		Property Get ClassName() As String
			Gets or sets the name of the class to be generated.
			Sets the name of the class to be generated.

		Property Get Variables() As ArrayList
			Gets or sets the collection of variables that define the class structure.
			The variables should be provided as an ArrayList of cCG_Variable objects.
			Sets the collection of variables that define the class structure.

		Property Get Header() As Collection
			Generates and returns a collection of strings representing the standard VBA
			class header, including versioning, attributes, and auto-generation comments.

		Property Get Declarations() As Collection
			Generates and returns a collection of strings representing the variable
			declarations for the class based on the provided variables.

		Property Get GetSetStatements() As Collection
			Generates and returns a collection of strings representing the Get and Set
			property procedures for each variable in the class, enabling encapsulated
			access to class properties.

		Property Get SubInitialize() As Collection
			Generates and returns a collection of strings representing the Initialize
			subroutine for the class, which sets up the class properties with provided
			values. Primary key variables are excluded from initialization by default.

		Public Function MergedCollection(Col As Collection, ColToAdd As Collection) As Collection
			Merges two collections by adding all items from the second collection to the first.
			
			Parameters:
			- Col: The primary collection to which items will be added.
			- ColToAdd: The collection containing items to add to the primary collection.
			
			Returns:
			- A new collection containing all items from both input collections.

		Public Sub WriteClass(Path As String)
			Generates and writes the complete class code to a .cls file at the specified path.
			The method assembles the class header, declarations, property procedures, and
			initialization method before writing to the file using the cLogger utility.
			
			Parameters:
			- Path: The directory path where the class file will be saved.

		Public Sub Initialize(ClassName As String, Optional Variables As Object = Nothing)
			Initializes the cCG_ClassWriter instance with the specified class name and
			an optional collection of variables. If variables are provided, they are sorted
			alphabetically by name for consistency.
			
			Parameters:
			- ClassName: The name of the class to be generated.
			- Variables: (Optional) An ArrayList of cCG_Variable objects defining the class properties.

	Class : cCG_DB_ClassWriter
			Class : cCG_DB_ClassWriter
			
			This class implements the writer of database classes in the code generator.
			It is responsible for generating class modules based on templates or reference classes,
			and customizing them for specific database tables.

		Property Get ClassName() As String
			Returns the name of the class being generated.

		Property Get ReferenceClass() As String
			Returns the name of the reference class used as a template for generating the new class.

		Property Get SubClassName(ClassName As String) As String
			Returns the singularized version of the class name, after removing the 'cDB_' prefix.
			This is used to generate appropriate names for class properties or methods.

		Property Get tableName(ClassName As String) As String
			Returns the database table name associated with the class,
			applying the appropriate prefix and removing the 'cDB_' prefix.

		Property Get Header() As Collection
			Generates and returns the header lines for the class file,
			including attributes and version information.

		Property Get ClassContent() As Collection
			Generates and returns the complete content of the class,
			including the header and code derived from the reference class.

		Function MergedCollection(Col As Collection, ColToAdd As Collection) As Collection
			Merges two collections into one, appending all items from ColToAdd to Col.

		Sub WriteClass(Path As String)
			Writes the generated class to a .cls file at the specified path.
			The class content is created based on the reference class and the current class's properties.

		Sub Initialize(ClassName As String, ReferenceClass As String, tblPrefix As String)
			Initializes the class writer with the necessary parameters for generating the class.
			- ClassName: The name of the class to be generated.
			- ReferenceClass: The name of the reference class used as a template.
			- tblPrefix: The prefix to be used for the associated database table name.

	Class : cCG_DB_Record_ClassWriter

		Property Get ClassName() As String

		Property Get Variables() As Collection

		Property Get Header() As Collection

		Property Get Declarations() As Collection

		Property Get GetSetStatements() As Collection

		Property Get SubInitialize() As Collection

		Property Get SubInitializeFromDB_Record() As Collection

		Property Get GetDB_Record() As Collection

		Sub WriteClass(Path As String)
			Write a class according to the collection of variables

		Sub Initialize(ClassName As String, Variables As ArrayList)

	Class : cCG_DB_Variable
			Class : cCG_DB_Variable
			
			This class implements the management of variables for database classes in the code generator.
			It provides properties and methods to generate code for variable declaration,
			initialization, and property methods (Get/Set) based on the variable's type.

		Property Get Name() As String
			Returns the name of the variable as used in the code.

		Property Get DBName() As String
			Returns the database name of the variable, which may differ from the code variable name.

		Property Get isObject() As Boolean
			Returns True if the variable is an object type; otherwise, False.

		Property Get isPrimaryKey() As Boolean
			Returns True if the variable is marked as a primary key.

		Property Get Declaration() As String
			Returns the declaration string for the variable in the format used in class modules.

		Property Get InitString() As String
			Returns the initialization string for the variable, used in method parameters or initialization blocks.

		Property Get InitStatement() As String
			Returns the initialization statement for the variable, used to set the variable's value in the class.

		Property Get SetStatement() As String
			Returns the Set property method for the variable, allowing external code to set the variable's value.

		Property Get GetStatement() As String
			Returns the Get property method for the variable, allowing external code to retrieve the variable's value.

		Sub Initialize(Name As String, Typ As String, Optional isPrimaryKey As Boolean = False)
			Initializes the variable with the given name, type, and optionally marks it as a primary key.
			- Name: The name of the database column.
			- Typ: The data type of the variable (e.g., String, Integer).
			- isPrimaryKey: (Optional) Boolean indicating whether this variable is a primary key. Default is False.

	Class : cCG_Variable
			Class : cCG_Variable
			
			This class implements the management of variables of VBA classes in the code generator.
			It provides properties and methods to generate code for variable declaration,
			initialization, and property methods (Get/Set) based on the variable's type.

		Property Get Name() As String
			Returns the name of the variable.

		Property Get isObject() As Boolean
			Determines if the variable is an object or a primitive data type.
			Returns True if the variable is an object, otherwise False.

		Property Get isPrimaryKey() As Boolean
			Determines if the variable is a primary key.
			Returns False since this is not a database object.

		Property Get Declaration()
			Returns the declaration string for the variable.
			Example: "Private myVariableName As VariableType"

		Property Get InitString() As String
			Returns the initialization string for the variable in function signatures.
			Example: "VariableName As VariableType"

		Property Get InitStatement() As String
			Returns the initialization statement for the variable.
			Example: "Set myVariableName = VariableName" (if it's an object)
			or "myVariableName = VariableName" (if it's a primitive type)

		Property Get SetStatement() As String
			Generates the Set property method for the variable.
			Example:
			Property Set VariableName (VariableName As VariableType)
			   Set myVariableName = VariableName
			End Property

		Property Get GetStatement() As String
			Generates the Get property method for the variable.
			Example:
			Property Get VariableName () As VariableType
			   Set/Get VariableName = myVariableName
			End Property

		Sub Initialize(Name As String, Typ As String)
			Initializes the variable with a name and type.

	Class : cComparer
			Class : cComparer
			
			This class implements comparison functions for an ArrayList of objects.
			Each field to compare should be added to the IComparer interface.
			
			Usage Example:
			Assuming you have an ArrayList `myVariables` containing objects with a field `o.Name`,
			you can define a comparer object, set the sorting field, and sort the list using the comparer:
			
			Dim comp As New cComparer
			comp.sortField = "Name"
			myVariables.Sort_2 comp
			
			This class implements the `mscorlib.IComparer` interface.

		Property Let sortField(sortField As String)
			Sets the field name by which the objects in the ArrayList will be sorted.

		Function Str_Compare(ByRef x As String, ByRef y As String) As Long
			Compares two strings using case-insensitive text comparison.
			Returns 0 if they are equal, -1 if x < y, and 1 if x > y.

		Function Long_Compare(ByVal a As Long, ByVal b As Long) As Long
			Compares two long integers.
			Returns 1 if a > b, -1 if a < b, and 0 if they are equal.

		Function IComparer_Compare(ByVal x As Variant, ByVal y As Variant) As Long
			Compares two objects based on the field specified by `mySortField`.
			Currently supports comparison of "Name" (as a string) and "id" (as a long integer).
			Returns 1 if x > y, -1 if x < y, and 0 if they are equal.

	Class : cDB
			Class : cDB
			
			This class implements the function to create, load, and update the database.

		Property Get Done(Optional error As String) As Boolean
			Returns True if no error occurred, otherwise False.

		Sub CreateTables()
			Creates all the database tables using the definitions provided in the external file.

		Sub AddIndexes()
			Adds indexes to the database tables using the definitions provided in the external file.

		Sub DeleteConstraints()
			Deletes the constraints from all tables to allow for their deletion.

		Sub DeleteTables()
			Deletes all the tables defined in the external file.

		Sub CreateViews()
			Creates all the views (queries) using the definitions provided in the external file.

		Sub DeleteView(Name As String)
			Deletes a single view (query) by name.

		Sub DeleteTable(Name As String)
			Deletes a single table by name.

		Function DeleteViews() As Boolean
			Deletes all the views (queries) defined in the external file.

		Sub addData(Data As cXL_Data)
			Adds data from an external Excel source into the database.

		Sub RemoveFiles()
			Clears the 'SokFiles' table.

		Sub addFiles(files As Collection)
			Loads the files into the 'SokFiles' table.

		Sub reloadViews()
			Reloads all the views from the definitions file.

		Sub DeleteDB()
			Deletes the entire database including views, constraints, and tables.

		Sub CreateDB()
			Creates the database from scratch using the definitions provided.

		Sub newDB()
			Deletes and recreates the database.

		Private Sub initDefinitions()
			Initializes the database definitions by reading them from the external files.

		Private Sub Class_Initialize()
			Class initialization logic. Definitions initialization is done explicitly.

		Private Sub Class_Terminate()
			Class termination logic.

	Class : cDB_Casino
			Class : cDB_Casino
			
			Code generated from the Class Definition 'Classes.def' at 30.05.2024
			by cCG_ClassWriter
			

		Property Get DZS_ID() As Long

		Property Get id() As Long

		Property Get Name() As String

		Property Get Online() As Boolean

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(DZS_ID As Long, Name As String, Online As Boolean)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_Casinos
			Class : cDB_casinos
			
			Code generated from the Class Definition 'Classes.def' at 23.05.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_Casino

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get Casino(id As Long) As cDB_Casino

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_Casino
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Property Get id_ByName(Name As String, Optional error As String = "") As Long
			Returns the ID associated with a specific Name from the table.
			This function assumes that the primary key in the table is named "id".
			If an error occurs (e.g., the Name is not found), the function returns 0.
			Parameters:
			  - Name: The name string used to search for the ID.
			  - error: An optional string parameter to capture any error messages.
			Returns:
			  - Long: The ID associated with the name, or 0 if not found or in case of an error.

		Property Get Casino_by_DZS_ID(DZS_ID As Long, Optional error As String = "") As cDB_Casino
			Retrieves a cDB_Casino object based on the provided DZS_ID.
			Parameters:
			  - DZS_ID: The DZS_ID (a unique identifier) used to search for the casino.
			  - error: An optional string parameter to capture any error messages.
			Returns:
			  - cDB_Casino: The cDB_Casino object that matches the DZS_ID, or Nothing if not found.

	Class : cDB_Criteria
			Class : cDB_criteria
			
			Code generated from the Class Definition 'Classes.def' at 23.05.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_Criterion

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get Criterion(id As Long) As cDB_Criterion

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_Criterion
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Property Get id_ByRef(Ref As String, Optional error As String = "") As Long
			Returns the ID associated with a specific reference from the table.
			This function assumes that the primary key in the table is named "id".
			If an error occurs (e.g., the reference is not found), the function returns 0.
			Parameters:
			  - Ref: The reference string used to search for the ID.
			  - error: An optional string parameter to capture any error messages.
			Returns:
			  - Long: The ID associated with the reference, or 0 if not found or in case of an error.

		Property Get LB_Collection() As Collection
			Returns a collection of records from the table where the reference starts with "LB_".
			This is typically used to retrieve a subset of records that belong to a specific category or group.
			Returns:
			  - Collection: A collection of records matching the "LB_%" reference pattern.

		Property Get OL_Collection() As Collection
			Returns a collection of records from the table where the reference starts with "OL_".
			This is typically used to retrieve a subset of records that belong to a specific category or group.
			Returns:
			  - Collection: A collection of records matching the "OL_%" reference pattern.

	Class : cDB_Criterion
			Class : cDB_Criterion
			
			Code generated from the Class Definition 'Classes.def' at 23.05.2024
			by cCG_ClassWriter
			

		Property Get Abbreviation() As String

		Property Get Comment() As String

		Property Get id() As Long

		Property Get Reference() As String

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(Abbreviation As String, Comment As String, Reference As String)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_CriterionValue
			Class : cDB_CriterionValue
			
			Code generated from the Class Definition 'Classes.def' at 26.05.2024
			by cCG_ClassWriter
			

		Property Get Casino() As String

		Property Get Casino_fk() As Long

		Property Get Criterion_fk() As Long

		Property Get Criterion_Ref() As String

		Property Get Operation() As String

		Property Get id() As Long

		Property Get Val() As Double

		Property Get Year() As Long

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(Casino As String, Casino_fk As Long, Criterion_fk As Long, Criterion_Ref As String, Operation As String, Val As Double, Year As Long)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_CriterionValues
			Class : cDB_criterion_values
			
			Code generated from the Class Definition 'Classes.def' at 26.05.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_CriterionValue

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get Casino_Period_Criterion_Value(id As Long) As cDB_CriterionValue

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_CriterionValue
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Sub Add(value As Double, Criterion_Ref As String, Casino As String, Year As Long, Optional ByRef error As String, Optional Operation As String = "LB")
			Adds or updates a record in the "CriterionValues" table with the provided details.
			Parameters:
			  - Value: The numerical value to be stored.
			  - Criterion_Ref: A reference to the criterion associated with this value.
			  - Casino: The name of the casino associated with this value.
			  - Year: The year associated with this value.
			  - error: An optional parameter to capture error messages.
			  - Operation: An optional parameter specifying the operation type (default is "LB").
			The function tries to update an existing record or create a new one if it doesn't exist.
			Initialize the cDB_CriterionValue object with the provided values.
			Initialize the cDB_Instruction object for updating or creating a row.
			Execute the instruction.
			Handle any errors that occur during the execution.

	Class : cDB_CrossviewInfo
			Class : cDB_CrossviewInfo
			
			Code generated from the Class Definition 'Classes.def' at 01.06.2024
			by cCG_ClassWriter
			

		Property Get Operation() As String

		Property Get id() As Long

		Property Get QueryName() As String

		Property Get Sheet_Prefix() As String

		Property Get Title() As String

		Property Get X_Name() As String

		Property Get Y_Name() As String

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(Operation As String, QueryName As String, Sheet_Prefix As String, Title As String, X_Name As String, Y_Name As String)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_CrossviewInfos
			Class : cDB_cross_view_infos
			
			Code generated from the Class Definition 'Classes.def' at 01.06.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_CrossviewInfo

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get CrossView_Info(id As Long) As cDB_CrossviewInfo

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_CrossviewInfo
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Sub Add(QueryName As String, Operation As String, Title As String, X_Name As String, Y_Name As String, SheetPrefix As String)
			Adds or updates a record in the cross-view table with the provided details.
			Parameters:
			  - QueryName: The name of the query being added or updated.
			  - Operation: The operation type (e.g., OL_, LB_).
			  - Title: The title of the cross-view.
			  - X_Name: The name for the X-axis.
			  - Y_Name: The name for the Y-axis.
			  - SheetPrefix: The prefix to be used for the sheet name.

		Property Get StringValue(resource_strings As cDB_ResourceStrings, QueryName As String, ResourceStringExtension As String, defaultValue As String) As String
			Retrieves a string value from the resource strings based on the query name and extension.
			If the string is not found, the default value is used.
			Parameters:
			  - resource_strings: An instance of cDB_ResourceStrings for fetching strings.
			  - QueryName: The name of the query.
			  - ResourceStringExtension: The extension to append to the query name to form the resource string key.
			  - defaultValue: The default value to return if the resource string is not found.
			Returns:
			  - String: The translated string or the default value.

		Sub Initialize(resource_strings As cDB_ResourceStrings)
			Initializes the cross-view table by reading queries from the database and setting up their corresponding titles, X/Y names, and sheet prefixes.
			The naming conventions should be respected, where:
			  - prefix = crw_
			  - Operation = OL_ | LB_ | BO_
			  - Title is derived from the string without prefix and underscores.
			  - SheetPrefix is created from the capital letters and numbers from the Title.
			  - Y_Name is created from the capital letter of the first name in the title.
			Translation will be made if the string Title is found in ResourceStrings.
			Parameters:
			  - resource_strings: An instance of cDB_ResourceStrings for fetching translated strings.

	Class : cDB_Definition
			Class : cDB_Definition
			
			This class provides the cDB_Definition object used by cDB_Definitions and
			the access properties to its contents. It encapsulates a single definition,
			storing the name and its associated value (definition).

		Sub Initialize(Name As String, definition As String)
			Initializes the cDB_Definition object with a name and its corresponding definition.
			Parameters:
			  - Name: The name of the definition.
			  - definition: The value or content of the definition.

		Property Get definition() As String
			Returns the value or content of the definition.

		Property Get Name() As String
			Returns the name of the definition.

	Class : cDB_Definitions
			Class : cDB_Definitions
			
			This class allows reading simple database definition files and creating a
			collection of cDB_Definition objects. It is designed to parse and manage
			definitions from a file, storing them in a collection for easy access.
			A collection to store the cDB_Definition objects

		Property Get definitions() As Collection
			Returns the collection of cDB_Definition objects.

		Property Get count() As Long
			Returns the number of cDB_Definition objects in the collection.

		Private Function ReplaceTab(Line As String) As String
			Replaces tab characters in a line with a single space.
			This function recursively processes the string to replace all tabs.
			Parameters:
			  - Line: The input string that may contain tab characters.
			Returns:
			  - String: The processed string with tabs replaced by spaces.

		Private Function CleanupLine(Line As String) As String
			Cleans up a line by removing comments and replacing tabs with spaces.
			This function also trims leading and trailing spaces from the line.
			Parameters:
			  - Line: The input string to be cleaned up.
			Returns:
			  - String: The cleaned-up string.

		Private Sub AddDefinitions(fStream As String)
			Parses a string stream containing multiple definitions and adds them
			to the myDefinitions collection as cDB_Definition objects.
			Parameters:
			  - fStream: The input string containing the definitions separated by semicolons.

		Private Sub ReadFile(Filename As String)
			Reads a definition file and processes it into a single string stream.
			Each line of the file is cleaned up, and the result is passed to AddDefinitions.
			Parameters:
			  - Filename: The path to the definition file to be read.

		Sub Initialize(Filename As String)
			Initializes the class by reading the specified definition file
			and creating a collection of cDB_Definition objects.
			Parameters:
			  - Filename: The path to the definition file to be read.

	Class : cDB_Field
			Class : cDB_Field
			
			This class manages abstract single records fields
			

		Sub Initialize(Col As String, Val As Variant)

		Property Get column() As String

		Property Get value() As Variant

		Property Get IdentiqueAs(rec As cDB_Field) As Boolean

	Class : cDB_Instruction
			Class : cDB_Instruction
			
			This class provides the low-level interface to access the database
			with SQL Statements.

		Private Sub connect()
			Establishes a connection to the current database.

		Private Sub disconnect()
			Closes the connection to the database.

		Property Get cmdText() As String
			Returns the SQL command text currently set in the command object.

		Function RemoveExtraQuotes(str As String) As String
			Removes extra quotes from a string if they exist at both the start and end.

		Function FormatValueForSQL(value As Variant) As String
			Formats a given value for use in an SQL statement, converting it to a string
			appropriate for its data type (e.g., Boolean, Integer, String, Date, etc.).

		Private Sub prepareSQL_Data()
			Prepares SQL data by iterating over fields in the record and
			building a list of columns and corresponding values for the SQL statement.

		Private Function createRec() As Boolean
			Creates a new record in the database by executing an INSERT SQL statement.

		Private Function executeQuery(Optional ByRef records As cDB_Records) As Boolean
			Executes a custom SQL query and optionally returns the results in a cDB_Records collection.

		Private Function readRec(ByRef records As cDB_Records) As Boolean
			Reads records from the database based on the specified criteria
			and returns the results in a cDB_Records collection.

		Private Function get_SET_Statment() As String
			Generates an SQL SET statement by iterating over the fields in the record,
			formatting each field as "column = value".

		Private Function UpdateOrCreateRec() As Boolean
			Updates a record if it exists or creates a new one if it doesn't.

		Private Function updateRec() As Boolean
			Updates a record in the database by executing an UPDATE SQL statement.

		Private Function deleteRec() As Boolean
			Deletes a record from the database by executing a DELETE SQL statement.

		Public Function ExistsTable(ByVal Table As String) As Boolean
			Checks if a specified table exists in the database.

		Sub InitQry(Query As String)
			Initializes the SQL command to be executed.

		Public Function Max(Table As String, column As String, _
			Retrieves the maximum value from a specified column in a table.

		Public Function Min(Table As String, column As String, _
			Retrieves the minimum value from a specified column in a table.

		Public Function Last(Table As String, column As String, _
			Retrieves the last value from a specified column in a table.

		Public Function First(Table As String, column As String, _
			Retrieves the first value from a specified column in a table.

		Public Function Sum(Table As String, column As String, _
			Retrieves the sum of values from a specified column in a table.

		Public Sub InitFromStr(action As eAction, Table As String, Optional columns As String, Optional values As String, _
			Initializes the record object from a string, setting action, table, columns, values, and conditions.

		Public Sub Initialize(action As eAction, Table As String, Optional record As cDB_Record, _
			Initializes the record object from a cDB_Record object, setting action, table, where clause, and conditions.

		Public Function execute(Optional ByRef records As cDB_Records) As Boolean
			Executes the SQL command based on the action type (e.g., create, read, update, delete, etc.).

		Private Sub Class_Initialize()
			Initializes the class, establishing a connection to the database.

		Private Sub Class_Terminate()
			Terminates the class, closing the connection to the database.

	Class : cDB_Menu
			Class : cDB_Menu
			
			This class manages the menu of the MS Access application.

		Function SetMenu(MenuName As String, Optional force As Boolean) As Boolean
			Sets the active menu bar to the specified MenuName, creating it from the database if necessary.
			The menu is created from records in the "Menus" table, and user permissions are considered.
			Parameters:
			  - MenuName: The name of the menu to set.
			  - force: Optional. If True, forces the menu to be reset even if it is already active.
			Returns:
			  - Boolean: True if the menu was successfully set, False otherwise.

		Private Sub SetMenuLevel2(MenuName As String, Parent As CommandBarPopup, ParentStrID As String)
			Sets the second level of the menu, adding items as either popups or buttons.
			This method is called recursively to build out submenus.
			Parameters:
			  - MenuName: The name of the menu to set.
			  - Parent: The CommandBarPopup object representing the parent menu item.
			  - ParentStrID: The string identifier of the parent menu item.

		Private Sub SetMenuLevel3(MenuName As String, Parent As CommandBarPopup, ParentStrID As String)
			Sets the third level of the menu, adding items as either popups or buttons.
			Parameters:
			  - MenuName: The name of the menu to set.
			  - Parent: The CommandBarPopup object representing the parent menu item.
			  - ParentStrID: The string identifier of the parent menu item.

		Sub resetMenu()
			Resets the current menu bar to the default state.

		Sub restoreMenu()
			Restores the previous menu bar that was active before the current menu was set.

	Class : cDB_Operation
			Class : cDB_Operation
			
			Code generated from the Class Definition 'Classes.def' at 23.05.2024
			by cCG_ClassWriter
			

		Property Get Operation() As String

		Property Get id() As Long

		Property Get Reference() As String

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(Operation As String, Reference As String)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_Operations
			Class : cDB_Operations
			
			Code generated from the Class Definition 'Classes.def' at 23.05.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_Operation

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get Operation(id As Long) As cDB_Operation

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_Operation
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

	Class : cDB_Record
			Class : cDB_Record
			
			This class manages a single cDB_Record, which is a collection of cDB_Field objects.

		Sub Add(Field As cDB_Field)
			Adds a cDB_Field object to the record's collection of fields.
			Parameters:
			  - Field: The cDB_Field object to add to the record.

		Property Get fields() As Collection
			Returns the collection of cDB_Field objects that make up the record.
			Returns:
			  - Collection: The collection of fields in the record.

		Property Get count() As Long
			Returns the number of fields in the record.

		Property Get column(index As Variant) As cDB_Field
			Retrieves a cDB_Field object based on the provided index or column name.
			Parameters:
			  - index: The index (numeric) or column name (string) of the field to retrieve.
			Returns:
			  - cDB_Field: The field object corresponding to the index or column name.

		Property Get value(Col As Variant) As Variant
			Retrieves the value of a field based on the provided index or column name.
			Parameters:
			  - Col: The index (numeric) or column name (string) of the field whose value is to be retrieved.
			Returns:
			  - Variant: The value of the specified field.

		Property Get IdentiqueAs(rec As cDB_Record) As Boolean
			Compares the current record with another record to determine if they have the same content.
			Parameters:
			  - rec: The cDB_Record object to compare against.
			Returns:
			  - Boolean: True if the records are identical, False otherwise.

		Public Sub Initialize(columns As String, Optional values As String = "")
			Initializes the record by parsing a comma-separated list of columns and optional values.
			The fields are created and added to the record's collection based on these inputs.
			Parameters:
			  - columns: A comma-separated string of column names.
			  - values: Optional. A comma-separated string of values corresponding to the columns.

	Class : cDB_Records
			Class : cDB_Records
			
			This class manages a collection of cDB_Record objects.

		Sub Remove(index As Long)
			Removes a record from the collection based on the provided index.
			Parameters:
			  - index: The position of the record to remove from the collection.

		Property Get count() As Long
			Returns the number of records in the collection.

		Property Get Item(index As Long) As cDB_Record
			Retrieves a cDB_Record object from the collection based on the provided index.
			Parameters:
			  - index: The position of the record to retrieve.
			Returns:
			  - cDB_Record: The record at the specified index.

		Sub Add(record As cDB_Record)
			Adds a cDB_Record object to the collection.
			Parameters:
			  - record: The cDB_Record object to add to the collection.

		Property Get Table() As String
			Returns the name of the table associated with the records.

		Property Get records() As Collection
			Returns the collection of cDB_Record objects.
			Returns:
			  - Collection: The collection of records managed by this class.

		Sub Initialize(tableName As String)
			Initializes the class with the name of the table associated with the records.
			Parameters:
			  - tableName: The name of the table to associate with the records.

	Class : cDB_ResourceString
			Class : cDB_ResourceStringstring
			
			First version created Automatically at 20.01.2024
			by cCG_ClassWriter
			

		Property Get DE() As String

		Property Get EN() As String

		Property Get FR() As String

		Property Get id() As Long

		Property Get IT() As String

		Property Get Ref() As String

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(DE As String, EN As String, FR As String, IT As String, Ref As String)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_ResourceStrings
			Class : cDB_ResourceStrings
			
			Code generated from the Class Definition 'Classes.def' at 02.03.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_ResourceString

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get ResourceString(id As Long) As cDB_ResourceString

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_ResourceString
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Property Get str(Ref As String) As String
			Retrieves a translated string from the ResourceStrings table based on the provided reference.
			The method first attempts to find the string in the user's selected language.
			If the string is not found, it defaults to English.
			Parameters:
			  - Ref: The reference key for the string to be translated.
			Returns:
			  - String: The translated string, or the reference key if no translation is found.

		Sub Initialize(Language As String)
			Initializes the translator with the specified language.
			Parameters:
			  - Language: The language code to use for translations (e.g., "EN" for English).

		Sub Class_Initialize()
			Automatically initializes the class with the current user's language.
			If the user's language is not set, it defaults to English.

	Class : cDB_Setting
			Class : cDB_Setting
			
			Code generated from the Class Definition 'Classes.def' at 28.01.2024
			by cCG_ClassWriter
			

		Property Get id() As Long

		Property Get Name() As String

		Property Get PValue() As String

		Property Get PBoolean() As Boolean

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(Name As String, PValue As String, PBoolean As Boolean)
			If you need to initialize with Primary key, add the corresponding field manually

	Class : cDB_Settings
			Class : cDB_Settings
			
			Code generated from the Class Definition 'Classes.def' at 28.01.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_Setting

		Property Get records(Optional filter As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get Setting(id As Long) As cDB_Setting

		Property Get Collection(Optional filter As String = "", Optional error As String = "") As Collection ' of cDB_Parameter
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Property Get PValue(Name As String) As Variant
			Retrieves the parameter value as a Variant based on the provided parameter name.
			The function looks for a setting with a name matching the provided Name.
			If the setting is found and is numeric, it converts it to either a Double or Long.
			Otherwise, it returns the original string value.
			Parameters:
			  - Name: The name of the parameter to retrieve.
			Returns:
			  - Variant: The value of the parameter, either as a numeric value or as a string.

		Property Get PBoolean(Name As String) As Boolean
			Retrieves the parameter value as a Boolean based on the provided parameter name.
			If the parameter is found, its Boolean value is returned.
			If not found, the function returns False.
			Parameters:
			  - Name: The name of the parameter to retrieve.
			Returns:
			  - Boolean: The Boolean value of the parameter, or False if not found.

		Sub Update_PBoolean(Name As String, bool As Boolean)
			Updates the Boolean value of a parameter in the database.
			If the parameter exists, it updates its Boolean value and writes the changes to the database.
			Parameters:
			  - Name: The name of the parameter to update.
			  - bool: The Boolean value to set.

	Class : cDB_SOKFile
			Class : cDB_SokFile
			
			Code generated from the Class Definition 'Classes.def' at 24.05.2024
			by cCG_ClassWriter
			

		Property Get FileSize() As Long

		Property Get id() As Long

		Property Get isLoaded() As Boolean

		Property Get LastChange() As Date

		Property Get Name() As String

		Property Get Path() As String

		Property Get Year() As Long

		Property Get record() As cDB_Record
			Returns the DB-Record

		Sub InitializeFromDB_Record(rec As cDB_Record)
			initialize the object content from the database record

		Sub Initialize(FileSize As Long, isLoaded As Boolean, LastChange As Date, Name As String, Path As String, Year As Long)
			If you need to initialize with Primary key, add the corresponding field manually

		Property Get fullPath() As String
			Returns the full path of the file by concatenating the path and the file name.

		Sub initializeFromFileSystem(file As Scripting.file)
			Initializes the object content from a file system object.
			The method extracts the file name, path, last modified date, and size from the provided file object.
			If the file name matches a specified pattern (cSOKFilter), it also extracts and sets the year from the file name.
			Parameters:
			  - file: The Scripting.file object representing the file to initialize the object with.

	Class : cDB_SOKFiles
			Class : cDB_sok_files
			
			Code generated from the Class Definition 'Classes.def' at 24.05.2024
			by cCG_DB_ClassWriter
			
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			returns true if the table exist in the database

		Property Get isAvailable() As Boolean
			returns true if the table exist in the database

		Property Get hasIndex(index As String) As Boolean
			returns true if the table is indexed by Index

		Property Get id(filter As String, Optional error As String = "") As Long
			return the first id of the table for the given condition
			This function assumes that the primary key is called "id"
			0 is return in cas of error

		Property Get Item(filter As String) As cDB_SOKFile

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get sok_file(id As Long) As cDB_SOKFile

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection ' of cDB_SokFile
			return alls the records of the DB
			The records shoud be interpreted externally
			0 is return in cas of error

		Property Get count()

		Sub DeleteAll()

		Sub Delete(Optional filter As String = "", Optional error As String = "")

		Property Get files()
			Returns the collection of Forms containing the Application Data collected by the formal checks of the application.

		Sub Initialize(root As String, filter As String)
			Initializes the object by creating an instance of cTree and using it to populate the myFiles collection.
			Parameters:
			  - root: The root directory to search for files.
			  - filter: A string pattern used to filter files in the root directory.

		Function SetFileAsLoaded(record As cDB_Record, LastChange As Date, Optional error As String) As Boolean
			Marks a file record as loaded and updates its last change date in the database.
			Parameters:
			  - record: The cDB_Record object representing the file to update.
			  - LastChange: The date to set as the last change date.
			  - error: Optional. A string to store error details.
			Returns:
			  - Boolean: True if the update is successful, False otherwise.

		Function FetchFiles(Optional NameFilter As String = "", Optional ByRef error As String) As cDB_Records
			Retrieves records from the SokFiles table that match the optional name filter.
			Parameters:
			  - NameFilter: Optional. A string pattern to filter records by name.
			  - error: Optional. A string to store error details.
			Returns:
			  - cDB_Records: A collection of records that match the filter criteria, or Nothing if an error occurs.

	Class : cDB_Translator
			Class : cDB_Translator
			
			This class provides a translation mechanism for the internationalization of menus and panels.

		Sub TranslateControlLabels(ctrls As Controls)
			Translates the labels and captions of controls in a given collection of controls.
			The function checks the type of each control and updates its Caption property using a resource string.
			Parameters:
			  - ctrls: A collection of controls (e.g., from a form) whose labels and captions need to be translated.

		Sub TranslateForm(ctrls As Controls)
			Translates the caption of a form and the labels/captions of all its controls.
			The function first updates the form's caption, then calls TranslateControlLabels to handle the controls.
			Parameters:
			  - ctrls: A collection of controls from the form to be translated.

	Class : cDB_User
			Class : cDB_User
			
			This class provides a simple user management system.
			Each user has a password, can be an administrator or not, and can be locked.

		Property Get Initialized() As Boolean
			Returns True if the user object has been initialized with user data.

		Property Get isAdmin() As Boolean
			Returns True if the user has administrative privileges.

		Property Get isLocked() As Boolean
			Returns True if the user account is locked.

		Property Get USERNAME() As String
			Returns the username of the user.

		Property Get Name() As String
			Returns the last name of the user.

		Property Get Firstname() As String
			Returns the first name of the user.

		Property Get UserID() As String
			Returns the user ID of the user.

		Property Get Password() As String
			Returns the password of the user.

		Property Get userLanguage() As String
			Returns the preferred language of the user.
			Sets the preferred language of the user.

		Public Function Initialize(usr As String) As Boolean
			Initializes the user object with data from the database based on the provided username.
			If the user is found, the object's properties are populated, and the function returns True.
			Parameters:
			  - usr: The username to initialize the user object with.

		Public Function InitializedFromEnvironment() As Boolean
			Initializes the user object based on the current environment's username and domain.
			This is useful for automatically loading the user based on the current session's user.

	Class : cDB_XXX
			Class : cDB_XXX
			
			First version created automatically on 26.01.2024
			by cCG_ClassWriter

		Property Get id() As Long
			Returns the ID of the object.
			Sets the ID of the object.
			Parameters:
			  - id: The ID value to set.

		Property Get IntValue() As Long
			Returns the integer value stored in the object.
			Sets the integer value in the object.
			Parameters:
			  - IntValue: The integer value to set.

		Property Get StrValue() As String
			Returns the string value stored in the object.
			Sets the string value in the object.
			Parameters:
			  - StrValue: The string value to set.

		Property Get record() As cDB_Record
			Returns the database record representation of the object.
			The record includes all fields (IntValue, StrValue) and their values.

		Sub InitializeFromDB_Record(rec As cDB_Record)
			Initializes the object with data from a database record.
			Parameters:
			  - rec: The database record containing the values to initialize the object with.

		Sub Initialize(IntValue As Long, StrValue As String)
			Initializes the object with specified integer and string values.
			If you need to initialize with a primary key, add the corresponding field manually.
			Parameters:
			  - IntValue: The integer value to initialize with.
			  - StrValue: The string value to initialize with.

	Class : cDB_XXXs
			Template class for Tables
			The code is used by the automatic code generator
			It provides access to all functions defined in the template from the corresponding object.
			The object can be extended with other properties, but generic properties should be implemented in the template object.
			Generated from Template Class Version 1.0
			Author Caj
			Last modification 28.01.2024
			

		Property Get tableName() As String
			Returns the table name for the object. This is a constant value.

		Property Get isAvailable() As Boolean
			Checks if the table exists in the database and returns True if it exists.

		Property Get hasIndex(index As String) As Boolean
			Checks if the table is indexed by the specified index and returns True if it is.
			Parameters:
			  - index: The index name to check for.

		Property Get id(filter As String, Optional error As String = "") As Long
			Returns the first ID from the table for the given filter condition.
			Assumes the primary key column is called "id".
			Returns 0 in case of an error.
			Parameters:
			  - filter: A filter condition to retrieve the specific ID.
			  - error: Optional. A string to store error details.

		Property Get Item(filter As String) As cDB_XXX
			Returns an object of type cDB_XXX for the given filter condition.
			Parameters:
			  - filter: A filter condition to retrieve the specific object.

		Property Get records(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As cDB_Records
			Returns all records from the table that match the optional filter condition.
			If an error occurs, it returns 0.
			Parameters:
			  - filter: Optional. A filter condition to retrieve specific records.
			  - PreCondition: Optional. A precondition to be applied to the query.
			  - PostCondition: Optional. A postcondition to be applied to the query.
			  - error: Optional. A string to store error details.

		Property Get XXX(id As Long) As cDB_XXX
			Returns a cDB_XXX object for the specified ID.
			Parameters:
			  - id: The ID of the record to retrieve.

		Property Get Collection(Optional filter As String = "", Optional ByRef PreCondition As String = "", Optional ByRef PostCondition As String = "", Optional error As String = "") As Collection
			Returns a collection of cDB_XXX objects for all records in the table that match the optional filter condition.
			Parameters:
			  - filter: Optional. A filter condition to retrieve specific records.
			  - PreCondition: Optional. A precondition to be applied to the query.
			  - PostCondition: Optional. A postcondition to be applied to the query.
			  - error: Optional. A string to store error details.

		Property Get count()
			Returns the count of records in the table.

		Sub DeleteAll()
			Deletes all records from the table.

		Sub Delete(Optional filter As String = "", Optional error As String = "")
			Deletes records from the table that match the optional filter condition.
			Parameters:
			  - filter: Optional. A filter condition to delete specific records.
			  - error: Optional. A string to store error details.

	Class : cFiles
			Class : cFiles
			
			This class manages a Scripting.File collection.

		Property Get count()
			Returns the number of files in the collection.

		Property Get files()
			Returns the collection of files that match the specified filter.

		Sub Initialize(root As String, filter As String)
			Initializes the cFiles class by creating a cTree instance and populating the file collection.
			Parameters:
			  - root: The root directory to search for files.
			  - filter: A string pattern used to filter files in the root directory.

	Class : cLogger
			Class : cLogger
			
			This class manages the logging mechanism.
			
			It allows reporting errors or information to a file and on the debug console.
			The class can be used to write to any files and supports different levels of verbosity.

		Property Get Filename() As String
			Returns the name of the log file.

		Property Get Path() As String
			Returns the path where the log file is located.

		Property Get FullName() As String
			Returns the full path and name of the log file.

		Property Get currentLine() As Long
			Returns the current line number in the log file.

		Property Get FileAlreadyOpen(Name As String) As Boolean
			Returns True if the specified file is already open in the logger, False otherwise.

		Private Property Get archiveName(Filename As String) As String
			Generates a timestamped archive name for the log file to avoid overwriting existing files.

		Sub LogEvent(ByVal Line As String, Optional VerbosityLevel As Verbosity = eError)
			Logs an event to the file and optionally to the debug console if the verbosity level is high enough.
			Parameters:
			  - Line: The text to log.
			  - VerbosityLevel: The verbosity level at which to log this event.

		Sub resetFile(Optional Filename As String = "")
			Closes the current log file and creates a new one. If an archive is enabled,
			the old file will be archived with a timestamp.
			Parameters:
			  - Filename: Optional. The name of the new log file. If omitted, the current name is used.

		Sub report(Col As Collection, Optional HeaderLines As Collection = Nothing, Optional VerbosityLevel As Verbosity = eError)
			Logs a collection of lines to the log file. Optionally, a header can be added before the collection.
			Parameters:
			  - Col: A collection of strings to log.
			  - HeaderLines: Optional. A collection of header strings to log before the main collection.
			  - VerbosityLevel: The verbosity level at which to log this report.

		Sub Initialize(FullFileName As String, Optional VerbosityLevel As Verbosity = eAll, Optional DebugPrint As Boolean = False, Optional archive As Boolean = False)
			Initializes the logger by creating the log file and setting the verbosity level and other options.
			Parameters:
			  - FullFileName: The full path and name of the log file.
			  - VerbosityLevel: Optional. The verbosity level to use for logging. Default is eAll.
			  - DebugPrint: Optional. If True, also prints logs to the debug console. Default is False.
			  - archive: Optional. If True, archives previous log files instead of overwriting them. Default is False.

		Sub Class_Terminate()
			Ensures that the log file is properly closed when the logger object is destroyed.

	Class : cRegExp
			Class : cRegExp
			
			This class simplifies the usage of regular expressions (regex) in VBA.
			It provides functionality to match text against regex patterns.
			The Library VBScript_RegExp_55.Regexp should be added to the references of the project.

		Public Function Match_Pattern(ByVal Text As String, ByVal pattern As String, Optional GlobalSearch As Boolean = True, Optional MultiLine As Boolean = True, Optional IgnoreCase As Boolean = True) As Boolean
			Matches the provided text against the given regex pattern.
			Returns True if there is a match and stores the match collection in myMatches.
			Parameters:
			  - Text: The text to search for the pattern.
			  - pattern: The regex pattern to match.
			  - GlobalSearch: If True, finds all matches in the text; otherwise, only the first match is found.
			  - MultiLine: If True, allows the pattern to match across multiple lines.
			  - IgnoreCase: If True, ignores case when matching the pattern.

		Property Get matches(Optional index As Long = 0) As Collection
			Returns a collection of submatches from the regex match collection.
			If an index is provided, it returns submatches for that specific match.
			Parameters:
			  - index: Optional. The index of the match to retrieve submatches from (0-based).
			If no matches are found, an empty collection is returned.

		Property Get regex()
			Returns a new instance of the RegExp object.

	Class : cTimer
			Class : cTimer
			
			This class provides simple timer finctionality
			

		Property Get StartTime() As Double
			Returns the start time of the first lap.

		Property Get HMS(ByVal time As Double) As String
			Converts a time value in seconds to a formatted string in "hh:mm:ss" format.

		Property Get Elapsed() As Double
			Returns the elapsed time from the start of the first lap to the current time.

		Property Get Lap(n As Integer) As Double
			Returns the duration of the nth lap.
			The lap duration is calculated as the difference between the nth and (n+1)th lap times.

		Property Let TimeTicks(TimeInterval As Double)
			Sets the time interval (in seconds) for checking time ticks.

		Property Get TimeTicksElapsed() As Boolean
			Checks if the specified time interval (TimeTicks) has elapsed since the last tick.
			Returns True if the time interval has elapsed, and updates the last tick time.

		Sub TStart()
			Starts the timer by recording the current time as the first lap and initializes the lap index.

		Sub TStop()
			Stops the timer by recording the current time as the final lap.

		Sub TReset()
			Resets the timer and clears all recorded laps.

	Class : cTree
			Class : cTree
			
			This class allows to retrieve files from a folder and its subfolders
			according to a filter defined as a Regex pattern using the FileSystemObject.

		Property Get Problems() As Collection
			Returns a collection of problems encountered during file operations, such as errors or deleted hidden files.

		Private Sub removeFile(index As Long)
			Removes a file from the collection if it is hidden, deletes the file, and logs the action or any errors encountered.

		Property Get files(DirList As Collection, Optional filter As String = "") As Collection
			Returns a collection of files from the directories specified in DirList that match the optional filter pattern.

		Property Get RootFiles(Optional filter As String = "") As Collection
			Returns a collection of files from the root folder that match the optional filter pattern.

		Private Sub addDirRecurs(ByRef f As Scripting.Folder, Optional filter As String = "", Optional FilterRootOnly As Boolean = False)
			Recursively adds directories to the DirList collection that match the optional filter pattern.

		Property Get dirs(Optional recursive As Boolean = False, Optional filter As String = "", Optional FilterRootOnly As Boolean = False) As Collection
			Returns a collection of directories from the root folder that match the optional filter pattern.
			If recursive is True, subdirectories are also included based on the specified options.

		Property Get fso()
			Returns the FileSystemObject instance.

		Property Get Folder()
			Returns the root folder object.

		Sub Initialize(root As String)
			Initializes the class by setting the root directory and creating the necessary FileSystemObject and folder objects.

	Class : cXL
			Class : cXL
			
			This class manages an Excel File
			

		Property Get Filename() As String
			Returns the file name extracted from the full path of the workbook.

		Property Get Path() As String
			Returns the directory path where the workbook is located.

		Property Get fullPath() As String
			Returns the full path of the workbook.

		Sub setStandardValues()
			Restores standard Excel settings such as screen updating, status bar visibility,
			automatic calculation mode, and event handling. This is typically called after
			speeding up operations or before closing the workbook.

		Sub Speedup()
			Disables certain Excel features to speed up the execution of code, such as screen updating,
			status bar visibility, and event handling. This is useful when performing bulk operations
			to improve performance.

		Function newBook() As Workbook
			Creates a new Excel workbook using the Excel application instance and returns it.

		Function OpenBook(FilePath As String, Optional SaveOnClose As Boolean = False) As Workbook
			Opens an Excel workbook from the specified file path. If the workbook is already open in Excel,
			it will reference that instance. If not, it will open a new instance and optimize Excel settings for speed.
			The function also handles errors if the file cannot be opened and returns the workbook object.

		Sub Save()
			Saves the currently open workbook.

		Sub CloseBook()
			Closes the workbook if it was opened by this instance. It also resets Excel settings
			to their standard values and optionally saves changes.

		Sub Class_Terminate()
			Ensures the workbook is properly closed when the class instance is destroyed.

	Class : cXL_App
			Class : cXL_App
			
			This class creates an Excel Application object and
			ensures that it is destroyed when the object is destroyed.
			

		Property Get Application() As Excel.Application
			Returns the Excel Application object.

		Private Sub Class_Initialize()
			Initializes the class by creating a new instance of the Excel Application.

		Private Sub Class_Terminate()
			Terminates the class by closing any open workbooks and quitting the Excel Application.
			This ensures that the Excel Application is properly destroyed when the object is destroyed.

	Class : cXL_Data
			Class : cXL_Data
			
			This class reads an Excel file and fills the database
			with its content. The database structure should contain
			fields according to the column names (first row) and the
			content type.
			It provides the capability to read only some columns defined
			in the Optional toBeRead Collection passed by the initialize method
			

		Property Get dataSheets() As Collection
			Returns the collection of data sheets that have been read from the Excel file.

		Property Get fk() As Long
			Returns the foreign key associated with the data (if any).

		Property Get fullPath() As String
			Returns the full path of the Excel file being processed.

		Sub readSheets(SheetName As String, ByRef obj As Object, XLBook)
			Reads the specified sheet from the Excel workbook and stores its content in a cXL_Rows object.
			The method iterates through the rows and columns of the sheet, processes the data types,
			and stores the cleaned-up values.

		Function hasToBeRead(Name As String) As Boolean
			Checks if the specified sheet name is in the list of sheets to be read.
			If myToBeRead is not initialized, all sheets are read.

		Sub Initialize(Name As String, Path As String, Optional fk As Long, Optional DataInfo As String = "", Optional toBeRead As Collection = Nothing)
			Initializes the cXL_Data object with the Excel file name, path, and optional parameters such as
			foreign key and a list of sheets to be read. The method reads the sheets and fills the database
			with their content.

	Class : cXL_dbData
			Class : cXL_dbData
			
			This class allows to fill a database tables from an Excel File
			The first Row contains the field's name as column's title
			

		Property Get tableName() As String
			Returns the name of the table associated with the current object.

		Property Get Rows() As cXL_Rows
			Returns the entire collection of rows (cXL_Rows) associated with the table.

		Property Get dataRows() As cXL_Rows
			Returns the data rows (cXL_Rows) associated with the table.
			This is a synonym for the Rows property.

		Property Get columnTitle(index As Integer) As String
			Returns the title of the column at the specified index (1-based).

		Property Get columnTitles() As String
			Returns a comma-separated string of all column titles.
			If a column title is empty, it assigns a default name "Column_" followed by its index.

		Public Property Get record(index As Integer) As cDB_Record
			Returns a cDB_Record object representing a single record (row) from the data.
			Only non-empty fields are added to the record.

		Public Property Get records() As cDB_Records
			Returns a cDB_Records collection containing all records from the data rows.
			Each record is created from non-empty fields in each row.

		Property Get rowValues(index As Integer) As String
			Returns a comma-separated string of values for a specified row (by index).
			Each value is enclosed in single quotes.

		Property Get rowCount() As Integer
			Returns the number of data rows (excluding the header row) in the table.

		Sub Initialize(tblName As String, Rows As cXL_Rows)
			Initializes the object with a table name and a collection of rows.

	Class : cXL_DZS_Activity_File
			Class : cXL_DZS_Activity_File
			
			This class reads the Excel file which contains some player-related data
			and fills appropriate criterion_values the database.
			
			The following data are read and put into the following additional criterion_values:
			 C_Yearly_Active_Players -> OL_98.1
			 C_Yearly_Played_Sessions -> OL_98.2
			 C_Yearly_Bets -> OL_98.3
			 C_Yearly_Wins -> OL_98.4
			 C_Yearly_Rake -> OL_98.5
			

		Sub ReadAndAddCriteria()
			Reads the Excel sheet, extracts player-related data, and adds these values to the `criterion_values` collection.
			The data includes yearly active players, played sessions, bets, wins, and rake.
			It identifies the correct casino using the DZS_Casino_Id and fills the database accordingly.

		Function Initialize()
			Initializes the class, setting up necessary configurations or initial states.
			Currently, this function is a placeholder and does not contain any implementation.

	Class : cXL_GGR_File
			Class : cXL_GGR_File
			
			This class reads the Excel file which contains GGR data
			and fills appropriate criterion_values the database.
			
			The following data are read and put into the following additional criterion_values:
			  cLB_GGR_Criterion As String -> LB_99.1
			  cOL_GGR_Criterion As String -> OL_99.1

		Sub ReadAndAddCriteria()
			Reads the Excel sheets for land-based (LB) and online (OL) casinos from the specified GGR file.
			Extracts the GGR (Gross Gaming Revenue) data for each casino and adds these values to the `criterion_values` collection.
			The subroutine handles both land-based and online operations, logging any issues encountered during the process.

		Function Initialize()
			Initializes the class, setting up necessary configurations or initial states.
			Currently, this function is a placeholder and does not contain any implementation.

	Class : cXL_Row
			Class : cXL_Row
			
			This class manages a single row
			

		Sub Add(ByVal Text As String)
			Adds a new column value (Text) to the collection (myColumns).
			The column is added with a key that corresponds to its position in the collection.

		Property Get Initialized() As Boolean
			Returns True if the collection (myColumns) has been initialized; otherwise, False.

		Property Get rowNumber() As Long
			Returns the row number associated with the current row of data.

		Property Get column(ByVal Item As Integer) As String
			Retrieves the value of a specific column in the collection based on the index provided (1-based index).

		Property Get count() As Integer
			Returns the number of columns in the collection (myColumns).

		Sub AlterColumn(column As Long, Text As String)
			Alters the value of an existing column in the collection (myColumns).
			The existing column is removed and replaced with the new value (Text).
			The new value is added at the correct position in the collection.

		Public Sub Initialize(rowNumber As Long)
			Initializes the collection (myColumns) and sets the row number (myRowNumber).
			This subroutine ensures that the collection is ready to store column values.

	Class : cXL_Rows
			Class : cXL_Rows
			
			This class manages a row collection
			

		Sub Add(ByVal Row As cXL_Row)
			Adds a new row (cXL_Row) to the collection of rows (myRows).
			If the collection has not been initialized, it calls the Initialize subroutine.

		Property Get Initialized() As Boolean
			Returns True if the collection (myRows) has been initialized; otherwise, False.

		Property Get Row(ByVal Item As Integer) As cXL_Row
			Retrieves a specific row (cXL_Row) from the collection based on the index provided (1-based index).

		Property Get count() As Integer
			Returns the number of rows in the collection (myRows).

		Property Get items() As Collection
			Returns the entire collection of rows (myRows).

		Property Get Rows() As Collection
			Returns the entire collection of rows (myRows).

		Public Sub Initialize()
			Initializes the collection (myRows) and sets the myInitialized flag to True.
			This ensures that the collection is ready to store rows.

	Class : cXL_SOK_2002_2006_File
			Class : cXL_SOK_2002_2006_File
			
			This class reads the Excel file which contains DOK Criterion_values from 2002-2006
			and fills the appropriate criterion_values in the database.
			
			Only the following data are available for that date range:
			  yearly Total Bans: LB_4.2
			  yearly Total Revoked Bans: LB_5.2.1
			

		Sub ReadAndAddCriteria()
			Reads the Excel sheet "Annexe2a" from the specified SOK file and adds the relevant data to the `criterion_values` collection.
			The subroutine processes yearly total bans and revoked bans for the years 2002-2006 and associates them with the correct casino and year.

		Function Initialize(xl_file As cDB_SOKFile)
			Initializes the class by setting the Excel file (cDB_SOKFile) to be processed.

	Class : cXL_SOK_2007_2014_File
			Class : cXL_SOK_2007_2014_File
			
			This class reads the Excel file which contains SOK Criterion_values from 2007-2014
			and fills the appropriate criterion_values in the database.
			
			Only the following yearly data are available for that date range:
			LB_2.1       : Entries
			LB_3.1       : EarlyDetectionProcessOpenings
			LB_3.1.1     : EmployeeObservations
			LB_3.1.4     : ThirdPartyInformations
			LB_3.3       : EarlyDetectionProcessClosures
			LB_3.3.1     : EarlyDetectionProcessesClosedWithoutMeasure
			LB_3.3.2     : EarlyDetectionProcessesClosedWithSelfBans
			LB_3.3.3     : EarlyDetectionProcessesClosedWithForcedBans
			LB_4.2       : Bans
			LB_4.2.1     : FinancialBans
			LB_4.2.2     : SocialAuthorityBans
			LB_4.2.3     : SelfBans
			LB_5.2.1     : Total Revoked Bans

		Sub ReadAndAddCriteria()
			Reads the Excel sheets corresponding to each casino for the years 2007-2014 and adds the relevant data to the `criterion_values` collection.
			The subroutine processes various DOK criteria, such as entries, bans, and early detection process openings, among others, and associates them with the correct casino and year.

		Function Initialize(xl_file As cDB_SOKFile)
			Initializes the class by setting the Excel file (cDB_SOKFile) to be processed.

	Class : cXL_SOK_2015_2019_File
			Class : cXL_SOK_2015_2019_File
			
			This class reads the Excel file which contains SOK Criterion_values from 2015-2019
			and fills the appropriate criterion_values in the database.
			
			All the data available for criteria defined in the Criteria Table are read.

		Sub ReadAndAddCriteria()
			Reads the Excel sheet "Vue d'ensemble" for the years 2015-2019 and adds the relevant data to the `criterion_values` collection.
			The subroutine processes all criteria defined in the Criteria Table and associates the data with the correct casino and year.

		Function Initialize(xl_file As cDB_SOKFile)
			Initializes the class by setting the Excel file (cDB_SOKFile) to be processed.

	Class : cXL_SOK_2020_20nn_File
			Class : cXL_SOK_2020_20nn_File
			
			This class reads the Excel file which contains SOK Criterion_values from 2020 onwards
			and fills the appropriate criterion_values in the database.
			
			All the data available for criteria defined in the Criteria Table are read.

		Sub ReadAndAddCriteria()
			Reads the Excel sheets for land-based (LB) and online (OL) casinos from the specified SOK file for 2020 onwards.
			Extracts the data for each criterion defined in the Criteria Table and adds these values to the `criterion_values` collection.
			The subroutine handles both LB and OL data and logs any issues encountered during the process.

		Function Initialize(xl_file As cDB_SOKFile)
			Initializes the class by setting the Excel file (cDB_SOKFile) to be processed.

Forms Documentation

	Form : Form_frm_CleanUp
			frm_CleanUp
			This form is a hidden utility designed to ensure that all objects are properly cleaned up when the program exits.
			It automatically closes any open Excel applications and other resources that need to be released upon program termination.

		Private Sub Form_Unload(Cancel As Integer)
			This event is triggered when the form is unloaded, typically when the application is closing.
			It calls the Close_XL_App function to close any open Excel applications.

		Private Sub Form_Open(Cancel As Integer)
			This event is triggered when the form is opened.
			It makes the form invisible, as it is intended to run in the background without user interaction.

	Form : Form_frm_Login
			frm_login
			This form manages the login process for users. It verifies user credentials, handles user authentication,
			and displays appropriate messages based on the success or failure of the login attempt.
			The form also initializes certain UI elements when loaded and closed, and manages the application menu upon successful login.

		Private Sub CANCEL_Click()
			Handles the event when the Cancel button is clicked.
			This will close the application when the Cancel button is clicked by the user.

		Private Sub Form_Close()
			This event is triggered when the form is closed.
			It sets up the application menu using the cDB_Menu class when the form is closed.

		Private Sub OK_Click()
			Handles the event when the OK button is clicked.
			This function checks the username and password entered by the user.
			If the credentials are valid, the form is closed and the user is marked as logged in.
			If the credentials are invalid, an appropriate message is displayed to the user.

		Private Sub Form_Load()
			This event is triggered when the form is loaded.
			It translates the control labels on the form based on the current language settings.

		Private Sub Form_Open(Cancel As Integer)
			This event is triggered when the form is opened.
			It initializes the form caption and clears the password field.
			It also sets the username field to the current user's username.

	Form : Form_frm_Main
			frm_Main
			This form serves as the main interface of the application. It provides various controls and menu options
			for loading files, initializing databases, exporting data, and managing application settings.
			The form handles user interactions through buttons and menu items, initializing the necessary processes
			when these controls are activated.

		Private Sub BTN_LOAD_FILE_LIST_Click()
			Triggered when the "Load File List" button is clicked.
			This event calls the Load_File_List_Cmd function to load the file list into the application.

		Private Sub BTN_NEW_DB_Click()
			Triggered when the "New DB" button is clicked.
			This event calls the InitializeNewDB_Cmd function to initialize a new database.

		Private Sub BTN_RELOAD_DB_Click()
			Triggered when the "Reload DB" button is clicked.
			This event calls the Load_DB_Cmd function to reload the database into the application.

		Private Sub MNU_CLOSE_TABS_Click()
			Triggered when the "Close Tabs" menu item is clicked.
			This event calls the Close_Tabs_Cmd function to close all open tabs in the application.

		Private Sub InitComboBoxes()
			Initializes the combo boxes on the form with the appropriate values.
			Specifically, it sets the language combo box to the current user's language preference.

		Private Sub Form_Load()
			Triggered when the form is loaded.
			This event initializes the application context, logs the user in, translates the form's labels based on the selected language,
			opens the hidden cleanup form, and initializes the combo boxes.

		Private Sub Form_Close()
			Triggered when the form is closed.
			This event ensures that any open Excel applications are closed when the main form is closed.

		Private Sub MNU_EXPORT_ALL_Click()
			Triggered when the "Export All" menu item is clicked.
			This event calls the Export_All_Cmd function to export all relevant data.

		Private Sub MNU_EXPORT_BO_Click()
			Triggered when the "Export BO" menu item is clicked.
			This event calls the Export_BO_Cmd function to export BO-related data.

		Private Sub MNU_EXPORT_LB_Click()
			Triggered when the "Export LB" menu item is clicked.
			This event calls the Export_LB_Cmd function to export LB-related data.

		Private Sub MNU_EXPORT_OL_Click()
			Triggered when the "Export OL" menu item is clicked.
			This event calls the Export_OL_Cmd function to export OL-related data.

		Private Sub MNU_LOAD_DZS_Click()
			Triggered when the "Load DZS" menu item is clicked.
			This event calls the Load_DZS_Cmd function to load DZS data into the application.

		Private Sub MNU_LOAD_FILES_Click()
			Triggered when the "Load Files" menu item is clicked.
			This event calls the Load_Files_Cmd function to load files into the application.

		Private Sub MNU_LOAD_GGR_Click()
			Triggered when the "Load GGR" menu item is clicked.
			This event calls the Load_GGR_Cmd function to load GGR data into the application.

		Private Sub MNU_LOAD_QUERY_Click()
			Triggered when the "Load Query" menu item is clicked.
			This event calls the Load_Query_Cmd function to load and execute a query in the application.

	Form : Form_frm_Password
			frm_Password
			This form allows the user to change their password.
			It includes fields for the old password, the new password, and confirmation of the new password.
			The form verifies that the old password is correct and that the new password matches the confirmation before allowing the change.

		Private Sub CANCEL_Click()
			This event is triggered when the "Cancel" button is clicked.
			If the user has not entered a password, it clears the current password and closes the form.

		Private Sub OK_Click()
			This event is triggered when the "OK" button is clicked.
			It checks the old password for correctness, ensures the new password matches its confirmation,
			and then updates the user's password if all checks pass.

		Private Sub Form_Load()
			This event is triggered when the form is loaded.
			It sets the form's caption to include the user's name, translates the control labels into the user's language,
			and manages the enabling of the old password field based on whether the user currently has a password set.

	Form : Form_frm_Users
			frm_Users
			This form manages user data within the application.
			It initializes the application context on load and handles password updates when the user double-clicks the password field.

		Private Sub Form_Load()
			Triggered when the form is loaded.
			This event initializes the application context and translates the form's labels based on the selected language.

		Private Sub USER_PASSWORD_DblClick(Cancel As Integer)
			Triggered when the user double-clicks on the password field.
			If a valid user ID is present, this event opens the password change form (frm_Password) for the selected user.


End of the project documentation

